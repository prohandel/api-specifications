{
  "openapi": "3.0.1",
  "info": {
    "title": "prohandel third party API v2",
    "description": "Interface for third party companies to access and change data from the prohandel ERP. To get started please read the <a href=\"/\">API documentation</a>.",
    "version": "v2"
  },
  "paths": {
    "/api/v2/article": {
      "get": {
        "tags": [
          "Article"
        ],
        "summary": "Get articles",
        "operationId": "A90",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeNoneSupplierArticles",
            "in": "query",
            "description": "Articles without a supplier are excluded it the paramater is not set to true",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Article"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/article/supplier/{supplierNumber}": {
      "get": {
        "tags": [
          "Article"
        ],
        "summary": "Get articles by supplier",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "supplierNumber",
            "in": "path",
            "description": "Unique numeric id of the supplier as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Article"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/article/category/{categoryNumber}": {
      "get": {
        "tags": [
          "Article"
        ],
        "summary": "Get articles by category",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "categoryNumber",
            "in": "path",
            "description": "Unique numeric id of the category as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeNoneSupplierArticles",
            "in": "query",
            "description": "Articles without a supplier are excluded it the paramater is not set to true",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Article"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/article/firstPurchase/{firstPurchase}": {
      "get": {
        "tags": [
          "Article"
        ],
        "summary": "Get articles by first purchase date",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "firstPurchase",
            "in": "path",
            "description": "Date of the first purchase in the format YYYY-MM-DD e.g. 2019-01-31",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "includeNoneSupplierArticles",
            "in": "query",
            "description": "Articles without a supplier are excluded it the paramater is not set to true",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Article"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/article/lastSale/{lastSale}": {
      "get": {
        "tags": [
          "Article"
        ],
        "summary": "Get articles by last sale date",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lastSale",
            "in": "path",
            "description": "Date of the last sale in the format YYYY-MM-DD e.g. 2019-01-31",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "includeNoneSupplierArticles",
            "in": "query",
            "description": "Articles without a supplier are excluded it the paramater is not set to true",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Article"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/article/{id}": {
      "get": {
        "tags": [
          "Article"
        ],
        "summary": "Get article by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the article as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Article"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/article/number/{number}": {
      "get": {
        "tags": [
          "Article"
        ],
        "summary": "Get article by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the article as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Article"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/article/changed/{since}": {
      "get": {
        "tags": [
          "Article"
        ],
        "summary": "Get changed articles",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "includeNoneSupplierArticles",
            "in": "query",
            "description": "Articles without a supplier are excluded it the paramater is not set to true",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Article"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/articlesize/{id}": {
      "get": {
        "tags": [
          "ArticleSize"
        ],
        "summary": "Get article sizes by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the entity as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_ArticleSize"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/articlesize/ean/{ean}": {
      "get": {
        "tags": [
          "ArticleSize"
        ],
        "summary": "Get article sizes by ean",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ean",
            "in": "path",
            "description": "EAN of the article size as a positive decimal value e.g. 1028",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_ArticleSize"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/articlesize/branch/{branchNumber}/number/{number}": {
      "get": {
        "tags": [
          "ArticleSize"
        ],
        "summary": "Get article sizes by number",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "branchNumber",
            "in": "path",
            "description": "Unique numeric id of the branch as a positive integer value e.g. 1028",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the article size as a positive decimal value e.g. 1028",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_ArticleSize"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/articlesize/branch/{branchNumber}": {
      "get": {
        "tags": [
          "ArticleSize"
        ],
        "summary": "Get article sizes by branch",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "branchNumber",
            "in": "path",
            "description": "Unique numeric id of the branch as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_ArticleSize"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/articlesize/branch/{branchNumber}/changed/{since}": {
      "get": {
        "tags": [
          "ArticleSize"
        ],
        "summary": "Get changed article sizes by branch",
        "parameters": [
          {
            "name": "branchNumber",
            "in": "path",
            "description": "Unique numeric id of the branch as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_ArticleSize"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/articlesize": {
      "get": {
        "tags": [
          "ArticleSize"
        ],
        "summary": "Get article sizes",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_ArticleSize"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/articlesize/branch/{branchNumber}/articleNumber/{articleNumber}": {
      "get": {
        "tags": [
          "ArticleSize"
        ],
        "summary": "Get article sizes by branch and article number",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "branchNumber",
            "in": "path",
            "description": "Unique numeric id of the branch as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "articleNumber",
            "in": "path",
            "description": "Unique numeric id of the article e.g. 8473.",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_ArticleSize"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/articlesize/articleNumber/{articleNumber}": {
      "get": {
        "tags": [
          "ArticleSize"
        ],
        "summary": "Get article sizes by article number",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "articleNumber",
            "in": "path",
            "description": "Unique numeric id of the article e.g. 8473.",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_ArticleSize"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/articlesize/changed/{since}": {
      "get": {
        "tags": [
          "ArticleSize"
        ],
        "summary": "Get changed article sizes",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_ArticleSize"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/articlesize/firstPurchase/{firstPurchase}": {
      "get": {
        "tags": [
          "ArticleSize"
        ],
        "summary": "Get article sizes by first purchase date",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "firstPurchase",
            "in": "path",
            "description": "Date of the first purchase in the format YYYY-MM-DD e.g. 2019-01-31",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_ArticleSize"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/articlesize/lastSale/{lastSale}": {
      "get": {
        "tags": [
          "ArticleSize"
        ],
        "summary": "Get article sizes by last sale date",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "lastSale",
            "in": "path",
            "description": "Date of the last sale in the format YYYY-MM-DD e.g. 2019-01-31",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_ArticleSize"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/articlesize/minimumStock/{minStock}": {
      "get": {
        "tags": [
          "ArticleSize"
        ],
        "summary": "Get article sizes by minimum stock",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "minStock",
            "in": "path",
            "description": "Minimum stock value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "includeNegative",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_ArticleSize"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/articlesize/EAN": {
      "get": {
        "tags": [
          "ArticleSize"
        ],
        "summary": "Get in stock article sizes grouped by EAN",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_ArticleSize"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/articlesize/EAN/changed/{since}": {
      "get": {
        "tags": [
          "ArticleSize"
        ],
        "summary": "Get changed article sizes grouped by EAN",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_ArticleSize"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/branch/{id}": {
      "get": {
        "tags": [
          "Branch"
        ],
        "summary": "Get branch by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the branch as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Branch"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/branch/number/{number}": {
      "get": {
        "tags": [
          "Branch"
        ],
        "summary": "Get branch by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the branch as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Branch"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/branch": {
      "get": {
        "tags": [
          "Branch"
        ],
        "summary": "Get branches",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Branch"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/branch/changed/{since}": {
      "get": {
        "tags": [
          "Branch"
        ],
        "summary": "Get changed branches",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Branch"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/cashRegisterPaymentOption/{id}": {
      "get": {
        "tags": [
          "CashRegisterPaymentOption"
        ],
        "summary": "Get payment option by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the payment option as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_CashRegisterPaymentOption"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/cashRegisterPaymentOption/number/{number}": {
      "get": {
        "tags": [
          "CashRegisterPaymentOption"
        ],
        "summary": "Get payment option by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the payment option as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_CashRegisterPaymentOption"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/cashRegisterPaymentOption": {
      "get": {
        "tags": [
          "CashRegisterPaymentOption"
        ],
        "summary": "Get payment options",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_CashRegisterPaymentOption"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/cashRegisterPaymentOption/changed/{since}": {
      "get": {
        "tags": [
          "CashRegisterPaymentOption"
        ],
        "summary": "Get changed payment options",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_CashRegisterPaymentOption"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/category/{id}": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Get category by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the category as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Category"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/category/number/{number}": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Get category by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the category as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Category"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/category": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Get categories",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Category"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/category/changed/{since}": {
      "get": {
        "tags": [
          "Category"
        ],
        "summary": "Get changed categories",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Category"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/color/{id}": {
      "get": {
        "tags": [
          "Color"
        ],
        "summary": "Get color by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the color as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Color"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/color/number/{number}": {
      "get": {
        "tags": [
          "Color"
        ],
        "summary": "Get color by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the color as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Color"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/color": {
      "get": {
        "tags": [
          "Color"
        ],
        "summary": "Get colors",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Color"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/color/changed/{since}": {
      "get": {
        "tags": [
          "Color"
        ],
        "summary": "Get changed colors",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Color"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/country/{id}": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Get country by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the country as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Country"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/country/number/{number}": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Get country by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the country as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Country"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/country/isoalpha2/{code}": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Get country ISO 3166-1 apha-2",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Unique ISO 3166-1 apha-2 code of the country",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Country"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/country/isoalpha3/{code}": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Get country by ISO 3166-1 apha-3",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Unique ISO 3166-1 apha-3 code of the country",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Country"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/country": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Get countries",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Country"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/country/changed/{since}": {
      "get": {
        "tags": [
          "Country"
        ],
        "summary": "Get changed countries",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Country"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/credit/{id}": {
      "get": {
        "tags": [
          "Credit"
        ],
        "summary": "Get credit by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the creditas a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Credit"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/credit/number/{number}": {
      "get": {
        "tags": [
          "Credit"
        ],
        "summary": "Get credit by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the credit as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Credit"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/credit": {
      "get": {
        "tags": [
          "Credit"
        ],
        "summary": "Get credits",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Credit"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/credit/customer/{customerNumber}/status/{status}": {
      "get": {
        "tags": [
          "Credit"
        ],
        "summary": "Get credits by customer and status",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Unique numeric id of the customer as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "Status of the credit. Possible values are 0 for open credits and 1 for cleared credits",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Credit"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/credit/status/{status}": {
      "get": {
        "tags": [
          "Credit"
        ],
        "summary": "Get credits by status",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "Status of the credit. Possible values are 0 for open credits and 1 for cleared credits",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Credit"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/credit/changed/{since}": {
      "get": {
        "tags": [
          "Credit"
        ],
        "summary": "Get changed credits",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Credit"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/credit/redemption/{id}": {
      "get": {
        "tags": [
          "Credit"
        ],
        "summary": "Get credit redemption by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the credit redemption as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Credit_Redeemed"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/credit/redemption/number/{number}": {
      "get": {
        "tags": [
          "Credit"
        ],
        "summary": "Get credit redemption by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the credit redemption as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Credit_Redeemed"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/credit/redemption": {
      "get": {
        "tags": [
          "Credit"
        ],
        "summary": "Get credit redemptions",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Credit_Redeemed"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/credit/redemption/changed/{since}": {
      "get": {
        "tags": [
          "Credit"
        ],
        "summary": "Get changed credit redemptions",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Common query parameter to apply paging",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Credit_Redeemed"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/credit/redemption/customer/{customerNumber}/status/{status}": {
      "get": {
        "tags": [
          "Credit"
        ],
        "summary": "Get credit redemptions by customer and status",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Unique numeric id of the customer as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "Status of the credit redemption. Possible values are 0 for open credit redemptions and 1 for cleared credit redemptions",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Credit_Redeemed"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/credit/redemption/status/{status}": {
      "get": {
        "tags": [
          "Credit"
        ],
        "summary": "Get credit redemptions by status",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "Status of the credit redemption. Possible values are 0 for open credit redemptions and 1 for cleared credit redemptions",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Credit_Redeemed"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/currency/{id}": {
      "get": {
        "tags": [
          "Currency"
        ],
        "summary": "Get currency by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the currency as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Currency"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/currency/number/{number}": {
      "get": {
        "tags": [
          "Currency"
        ],
        "summary": "Get currency by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the currency as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Currency"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/currency": {
      "get": {
        "tags": [
          "Currency"
        ],
        "summary": "Get currencies",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Currency"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/currency/changed/{since}": {
      "get": {
        "tags": [
          "Currency"
        ],
        "summary": "Get changed currencies",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Currency"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/customer/{id}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get customer by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the customer as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Customer"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      },
      "put": {
        "tags": [
          "Customer"
        ],
        "summary": "Update customer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the customer as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Customer data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_Customer_Update"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_Customer_Update"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_Customer_Update"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_Customer_Update"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "423": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "415": {
            "description": "Method not allowed"
          }
        }
      }
    },
    "/api/v2/customer/number/{number}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get customer by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the customer as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Customer"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/customer": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get customers",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Customer"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      },
      "post": {
        "tags": [
          "Customer"
        ],
        "summary": "Create customer",
        "requestBody": {
          "description": "Customer data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_Customer_Create"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_Customer_Create"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_Customer_Create"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_Customer_Create"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Customer"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          },
          "415": {
            "description": "Method not allowed"
          }
        }
      }
    },
    "/api/v2/customer/changed/{since}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get changed customers",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Customer"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/customer/city/{city}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get customers by city",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "city",
            "in": "path",
            "description": "Name of the city as string value. Maximum allowed length is 60 characters",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Customer"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/customer/email/{email}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get customer by email",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "email",
            "in": "path",
            "description": "E-Mail adress as string value. Maximum allowed lenght is 80 characters",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Customer"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/customer/customerCard/{customerCard}": {
      "get": {
        "tags": [
          "Customer"
        ],
        "summary": "Get customer by customer card number",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerCard",
            "in": "path",
            "description": "Unique numeric id of the customer card as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Customer"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/customerCard/{id}": {
      "get": {
        "tags": [
          "CustomerCard"
        ],
        "summary": "Get customer card by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the entity as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_CustomerCard"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/customerCard/customer/{customerNumber}": {
      "get": {
        "tags": [
          "CustomerCard"
        ],
        "summary": "Get customer cards by customer number",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Unique numeric id of the entity as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_CustomerCard"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/customerCard": {
      "get": {
        "tags": [
          "CustomerCard"
        ],
        "summary": "Get customer cards",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_CustomerCard"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/customerCard/changed/{since}": {
      "get": {
        "tags": [
          "CustomerCard"
        ],
        "summary": "Get changed customer cards",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_CustomerCard"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/customerOrder": {
      "get": {
        "tags": [
          "CustomerOrder"
        ],
        "summary": "Get orders by branch",
        "parameters": [
          {
            "name": "branch",
            "in": "query",
            "description": "Unique numeric id of the branch as a positive integer value. Valid branch numbers can be queried from the /api/v2/branch endpoint.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_CustomerOrderCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      },
      "post": {
        "tags": [
          "CustomerOrder"
        ],
        "summary": "Create customer order",
        "parameters": [
          {
            "name": "branch",
            "in": "query",
            "description": "Unique numeric id of the branch as a positive integer value. Valid branch numbers can be queried from the /api/v2/branch endpoint.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skipCustomerCreation",
            "in": "query",
            "description": "Skips any customer creation to implement guest orders.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "Order data in the request body.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_CustomerOrder_Create"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_CustomerOrder_Create"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_CustomerOrder_Create"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_CustomerOrder_Create"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          },
          "415": {
            "description": "Method not allowed"
          }
        }
      }
    },
    "/api/v2/customerOrder/changed/{since}": {
      "get": {
        "tags": [
          "CustomerOrder"
        ],
        "summary": "Get changed orders",
        "parameters": [
          {
            "name": "branch",
            "in": "query",
            "description": "Unique numeric id of the branch as a positive integer value. Valid branch numbers can be queried from the /api/v2/branch endpoint.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_CustomerOrder"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/customerOrder/{id}": {
      "get": {
        "tags": [
          "CustomerOrder"
        ],
        "summary": "Get order by id",
        "parameters": [
          {
            "name": "branch",
            "in": "query",
            "description": "Unique numeric id of the branch as a positive integer value. Valid branch numbers can be queried from the /api/v2/branch endpoint.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the order as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_CustomerOrderCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/customerOrder/number/{number}": {
      "get": {
        "tags": [
          "CustomerOrder"
        ],
        "summary": "Get order by webshop and number",
        "parameters": [
          {
            "name": "branch",
            "in": "query",
            "description": "Unique numeric id of the branch as a positive integer value. Valid branch numbers can be queried from the /api/v2/branch endpoint.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Unique string based order number",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_CustomerOrderCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/customerOrder/customerNumber/{customerNumber}": {
      "get": {
        "tags": [
          "CustomerOrder"
        ],
        "summary": "Get orders by customer",
        "parameters": [
          {
            "name": "branch",
            "in": "query",
            "description": "Unique numeric id of the branch as a positive integer value. Valid branch numbers can be queried from the /api/v2/branch endpoint.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Unique numeric id as a positive integer value as received from the customer endpoint. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_CustomerOrderCollection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/department/{id}": {
      "get": {
        "tags": [
          "Department"
        ],
        "summary": "Get department by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the department as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Department"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/department/number/{number}": {
      "get": {
        "tags": [
          "Department"
        ],
        "summary": "Get department by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the department as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Department"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/department": {
      "get": {
        "tags": [
          "Department"
        ],
        "summary": "Get departments",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Department"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/department/changed/{since}": {
      "get": {
        "tags": [
          "Department"
        ],
        "summary": "Get changed departments",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Department"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/deposit/{id}": {
      "get": {
        "tags": [
          "Deposit"
        ],
        "summary": "Get deposit by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the deposit as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Deposit"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/deposit/number/{number}": {
      "get": {
        "tags": [
          "Deposit"
        ],
        "summary": "Get deposits by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the deposit as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Deposit"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/deposit": {
      "get": {
        "tags": [
          "Deposit"
        ],
        "summary": "Get deposits",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Deposit"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/deposit/customer/{customerNumber}/status/{status}": {
      "get": {
        "tags": [
          "Deposit"
        ],
        "summary": "Get deposits by customer and status",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Unique numeric id of the customer as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "Status of the deposit. Possible values are 0 for open deposits and 1 for cleared deposits",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Deposit"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/deposit/status/{status}": {
      "get": {
        "tags": [
          "Deposit"
        ],
        "summary": "Get deposits by status",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "Status of the deposit. Possible values are 0 for open deposits and 1 for cleared deposits",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Deposit"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/deposit/changed/{since}": {
      "get": {
        "tags": [
          "Deposit"
        ],
        "summary": "Get changed deposits",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Deposit"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/deposit/redemption/{id}": {
      "get": {
        "tags": [
          "Deposit"
        ],
        "summary": "Get deposit redemption by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the deposit redemption as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Deposit_Redeemed"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/deposit/redemption/number/{number}": {
      "get": {
        "tags": [
          "Deposit"
        ],
        "summary": "Get deposit redemption by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the deposit redemption as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Deposit_Redeemed"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/deposit/redemption": {
      "get": {
        "tags": [
          "Deposit"
        ],
        "summary": "Get deposit redemptions",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Deposit_Redeemed"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/deposit/redemption/changed/{since}": {
      "get": {
        "tags": [
          "Deposit"
        ],
        "summary": "Get changed deposit redemptions",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Deposit_Redeemed"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/deposit/redemption/customer/{customerNumber}/status/{status}": {
      "get": {
        "tags": [
          "Deposit"
        ],
        "summary": "Get deposit redemptions by customer and status",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Unique numeric id of the customer as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "Status whether the full amount of the deposit has been redeemed (1 = fully redeemed, 0 = open)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Deposit_Redeemed"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/deposit/redemption/status/{status}": {
      "get": {
        "tags": [
          "Deposit"
        ],
        "summary": "Get deposit redemptions by status",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "Status whether the full amount of the deposit has been redeemed (1 = fully redeemed, 0 = open)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Deposit_Redeemed"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/directdebit/customer/{customerNumber}/date/{dateFrom}/{dateUntil}": {
      "get": {
        "tags": [
          "DirectDebit"
        ],
        "summary": "Get direct debits by customer and date",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Unique numeric id of the customer as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dateFrom",
            "in": "path",
            "description": "Start date of the range in the format YYYY-MM-DD e.g. 2019-01-31",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateUntil",
            "in": "path",
            "description": "End date of the range in the format YYYY-MM-DD e.g. 2019-01-31",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_DirectDebit"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/action/branch/{branch}/externalCustomerReturn": {
      "post": {
        "tags": [
          "ExternalCustomerReturn"
        ],
        "summary": "Create external customer return request",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "description": "Branch that the goods are returned to",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Data to process the return and identify the customer",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalCustomerReturn_Create"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalCustomerReturn_Create"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalCustomerReturn_Create"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalCustomerReturn_Create"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          },
          "415": {
            "description": "Method not allowed"
          }
        }
      }
    },
    "/api/v2/desadv": {
      "get": {
        "tags": [
          "ExternalDispatchAdvice"
        ],
        "summary": "Get unprocessed dispatch advices",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_DispatchAdvice"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/desadv/check": {
      "post": {
        "tags": [
          "ExternalDispatchAdvice"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_DispatchAdvice"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_DispatchAdvice"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_DispatchAdvice"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_DispatchAdvice"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_DispatchAdvice"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          },
          "415": {
            "description": "Method not allowed"
          }
        }
      }
    },
    "/api/v2/action/externalInventoryDiscrepancy": {
      "post": {
        "tags": [
          "ExternalInventoryDiscrepancy"
        ],
        "summary": "Create external inventory discrepancy",
        "requestBody": {
          "description": "Inventory discrepancy data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalInventoryDiscrepancy_Create"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalInventoryDiscrepancy_Create"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalInventoryDiscrepancy_Create"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalInventoryDiscrepancy_Create"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          },
          "415": {
            "description": "Method not allowed"
          }
        }
      }
    },
    "/api/v2/action/externalOrder": {
      "post": {
        "tags": [
          "ExternalOrder"
        ],
        "summary": "Create external EDI order",
        "requestBody": {
          "description": "Order data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalOrder_Create"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalOrder_Create"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalOrder_Create"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalOrder_Create"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          },
          "415": {
            "description": "Method not allowed"
          }
        }
      }
    },
    "/api/v2/action/branch/{branch}/externalPayment": {
      "post": {
        "tags": [
          "ExternalPayment"
        ],
        "summary": "Create external sale",
        "description": "Used to submit sales that are fully completed by an external system to the ERP.\r\nThis is for example used if articles are exported to an external marketplace like Amazon where the process of selling, payment and shipping are handled.",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "description": "Branch the sale is assigned to",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Sale data submitted in the request body",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalPayment_Create"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalPayment_Create"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalPayment_Create"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalPayment_Create"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          },
          "415": {
            "description": "Method not allowed"
          }
        }
      }
    },
    "/api/v2/action/branch/{branch}/externalPaymentReturn": {
      "post": {
        "tags": [
          "ExternalPayment"
        ],
        "summary": "Reverse external sale",
        "description": "Use this method to reverse any external sales created through api/v2/action/branch/{branch}/externalPayment.\r\nThis is used when the return of goods is handled by an external marketplace like Amazon and the ERP needs to be informed about the reversed sale.",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "description": "Branch the goods are returned to",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Return data submitted in the request body",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalPaymentReturn_Create"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalPaymentReturn_Create"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalPaymentReturn_Create"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalPaymentReturn_Create"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          },
          "415": {
            "description": "Method not allowed"
          }
        }
      }
    },
    "/api/v2/action/branch/{branch}/externalPaymentCancelation": {
      "post": {
        "tags": [
          "ExternalPayment"
        ],
        "summary": "Cancel external sale",
        "description": "Use this method to cancel any external sales created through api/v2/action/branch/{branch}/externalPayment.\r\nThis is used when the cancelation of goods is handled by an external marketplace like Amazon and the ERP needs to be informed about the canceled sale.\r\nOther than the api/v2/action/branch/{branch}/externalPaymentReturn call this call will result in an inventory cleanup",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "description": "Branch the cancelation is assigned to",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "description": "Cancelation data submitted in the request body",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalPaymentReturn_Create"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalPaymentReturn_Create"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalPaymentReturn_Create"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalPaymentReturn_Create"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          },
          "415": {
            "description": "Method not allowed"
          }
        }
      }
    },
    "/api/v2/action/externalPriceReduction": {
      "post": {
        "tags": [
          "ExternalPriceReduction"
        ],
        "summary": "Create external price reduction",
        "requestBody": {
          "description": "Price reduction data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalPriceReduction_Create"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalPriceReduction_Create"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalPriceReduction_Create"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalPriceReduction_Create"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          },
          "415": {
            "description": "Method not allowed"
          }
        }
      }
    },
    "/api/v2/action/externalStocktaking": {
      "post": {
        "tags": [
          "ExternalStocktaking"
        ],
        "summary": "Create external stocktaking",
        "requestBody": {
          "description": "Stocktaking data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalStocktaking_Create"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalStocktaking_Create"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalStocktaking_Create"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalStocktaking_Create"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          },
          "415": {
            "description": "Method not allowed"
          }
        }
      }
    },
    "/api/v2/action/branch/{branch}/externalSupplierReturn": {
      "post": {
        "tags": [
          "ExternalSupplierReturn"
        ],
        "summary": "Create external supplier return request",
        "description": "Supplier returns created by this endpoint are stored in the database by default and must be manually imported and reviewed in the program \r\n'Lieferantenretoure' in the ERP before they are booked. To enable immediate booking without review use the option bookImmediately.",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "description": "Branch that wants to return the goods",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "bookImmediately",
            "in": "query",
            "description": "Flags the supplier return for immediate booking",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "description": "Data to process the return and identify the supplier",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalSupplierReturn_Create"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalSupplierReturn_Create"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalSupplierReturn_Create"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalSupplierReturn_Create"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          },
          "415": {
            "description": "Method not allowed"
          }
        }
      }
    },
    "/api/v2/action/externalTransfer": {
      "post": {
        "tags": [
          "ExternalTransfer"
        ],
        "summary": "Create external transfer",
        "requestBody": {
          "description": "Transfer data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalTransfer_Create"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalTransfer_Create"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalTransfer_Create"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ExternalTransfer_Create"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          },
          "415": {
            "description": "Method not allowed"
          }
        }
      }
    },
    "/api/v2/function/{id}": {
      "get": {
        "tags": [
          "Function"
        ],
        "summary": "Get function by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the function as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Function"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/function/number/{number}": {
      "get": {
        "tags": [
          "Function"
        ],
        "summary": "Get function by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the function as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Function"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/function": {
      "get": {
        "tags": [
          "Function"
        ],
        "summary": "Get functions",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Function"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/function/changed/{since}": {
      "get": {
        "tags": [
          "Function"
        ],
        "summary": "Get changed functions",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Function"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/generalcategory/{id}": {
      "get": {
        "tags": [
          "GeneralCategory"
        ],
        "summary": "Get general category by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the general category as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_GeneralCategory"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/generalcategory/number/{number}": {
      "get": {
        "tags": [
          "GeneralCategory"
        ],
        "summary": "Get general category by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the general category as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_GeneralCategory"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/generalcategory": {
      "get": {
        "tags": [
          "GeneralCategory"
        ],
        "summary": "Get general categories",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_GeneralCategory"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/generalcategory/changed/{since}": {
      "get": {
        "tags": [
          "GeneralCategory"
        ],
        "summary": "Get changed general categories",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_GeneralCategory"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/inventory/{id}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get inventory by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the entity as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Inventory"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/inventory": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get inventories",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Inventory"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/inventory/active": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get active inventories",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Inventory"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/inventory/changed/{since}": {
      "get": {
        "tags": [
          "Inventory"
        ],
        "summary": "Get changed inventories",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Inventory"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/invoice/{id}": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Get invoice by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the invoice as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Invoice"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/invoice/number/{number}": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Get invoice by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the invoice as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Invoice"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/invoice": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Get invoices",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Invoice"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/invoice/changed/{since}": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Get changed invoices",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Invoice"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/label/{id}": {
      "get": {
        "tags": [
          "Label"
        ],
        "summary": "Get label by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the label as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Label"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/label/number/{number}": {
      "get": {
        "tags": [
          "Label"
        ],
        "summary": "Get label by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the label as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Label"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/label": {
      "get": {
        "tags": [
          "Label"
        ],
        "summary": "Get labels",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Label"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/label/changed/{since}": {
      "get": {
        "tags": [
          "Label"
        ],
        "summary": "Get changed label",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Label"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/labelType/{id}": {
      "get": {
        "tags": [
          "LabelType"
        ],
        "summary": "Get label type by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the label type as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_LabelType"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/labelType/number/{number}": {
      "get": {
        "tags": [
          "LabelType"
        ],
        "summary": "Get label type by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the label type as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_LabelType"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/labelType": {
      "get": {
        "tags": [
          "LabelType"
        ],
        "summary": "Get label types",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_LabelType"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/labelType/changed/{since}": {
      "get": {
        "tags": [
          "LabelType"
        ],
        "summary": "Get changed label types",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_LabelType"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/maincategory/{id}": {
      "get": {
        "tags": [
          "MainCategory"
        ],
        "summary": "Get main category by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the main category as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_MainCategory"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/maincategory/number/{number}": {
      "get": {
        "tags": [
          "MainCategory"
        ],
        "summary": "Get main category by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the main category as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_MainCategory"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/maincategory": {
      "get": {
        "tags": [
          "MainCategory"
        ],
        "summary": "Get main categories",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_MainCategory"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/maincategory/changed/{since}": {
      "get": {
        "tags": [
          "MainCategory"
        ],
        "summary": "Get changed main categories",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_MainCategory"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/maindepartment/{id}": {
      "get": {
        "tags": [
          "MainDepartment"
        ],
        "summary": "Get main department by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the main department as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_MainDepartment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/maindepartment/number/{number}": {
      "get": {
        "tags": [
          "MainDepartment"
        ],
        "summary": "Get main department by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the main department as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_MainDepartment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/maindepartment": {
      "get": {
        "tags": [
          "MainDepartment"
        ],
        "summary": "Get main departments",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_MainDepartment"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/maindepartment/changed/{since}": {
      "get": {
        "tags": [
          "MainDepartment"
        ],
        "summary": "Get changed main departmants",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_MainDepartment"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/material/{id}": {
      "get": {
        "tags": [
          "Material"
        ],
        "summary": "Get material by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the material as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Material"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/material/number/{number}": {
      "get": {
        "tags": [
          "Material"
        ],
        "summary": "Get material by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the material as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Material"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/material": {
      "get": {
        "tags": [
          "Material"
        ],
        "summary": "Get materials",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Material"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/material/changed/{since}": {
      "get": {
        "tags": [
          "Material"
        ],
        "summary": "Get changed materials",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Material"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/minimumInventory": {
      "get": {
        "tags": [
          "MinimumInventory"
        ],
        "summary": "Get minimum inventory",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_MinimumInventory"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/minimumInventory/changed/{since}": {
      "get": {
        "tags": [
          "MinimumInventory"
        ],
        "summary": "Get changed minimum inventory",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_MinimumInventory"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/order": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get orders",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Order"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/order/changed/{since}": {
      "get": {
        "tags": [
          "Order"
        ],
        "summary": "Get changed orders",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_OrderChanges"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/outbound/supplierreturn": {
      "get": {
        "tags": [
          "Outbound"
        ],
        "summary": "Get outbound supplier returns",
        "description": "Outbound supplier returns have positive values for amount and prices. Negative values in these fields indicate a reversal.",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_OutboundSupplierReturn"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/outbound/supplierreturn/changed/{since}": {
      "get": {
        "tags": [
          "Outbound"
        ],
        "summary": "Get changed outbound supplier returns",
        "description": "Outbound supplier returns have positive values for amount and prices. Negative values in these fields indicate a reversal.",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_OutboundSupplierReturn"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/outbound/transfer": {
      "get": {
        "tags": [
          "Outbound"
        ],
        "summary": "Get outbound transfers",
        "description": "Outbound transfers have positive values for amount and prices. Negative values in these fields indicate a reversal.",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_OutboundTransfer"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/outbound/transfer/changed/{since}": {
      "get": {
        "tags": [
          "Outbound"
        ],
        "summary": "Get changed outbound transfers",
        "description": "Outbound transfers have positive values for amount and prices. Negative values in these fields indicate a reversal.",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_OutboundTransfer"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/outbound/misc": {
      "get": {
        "tags": [
          "Outbound"
        ],
        "summary": "Get outbound misc",
        "description": "Outbound misc have positive values for amount and prices. Negative values in these fields indicate a reversal.",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_OutboundMisc"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/outbound/misc/changed/{since}": {
      "get": {
        "tags": [
          "Outbound"
        ],
        "summary": "Get changed outbound misc",
        "description": "Outbound misc have positive values for amount and prices. Negative values in these fields indicate a reversal.",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_OutboundMisc"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/outbound/inventory": {
      "get": {
        "tags": [
          "Outbound"
        ],
        "summary": "Get outbound inventory difference",
        "description": "Outbound inventory differences have positive values for amount and prices. Negative values in these fields indicate a reversal.",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_OutboundInventoryDifference"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/outbound/inventory/changed/{since}": {
      "get": {
        "tags": [
          "Outbound"
        ],
        "summary": "Get changed outbound inventory difference",
        "description": "Outbound inventory differences have positive values for amount and prices. Negative values in these fields indicate a reversal.",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_OutboundInventoryDifference"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/packinglist/{id}": {
      "get": {
        "tags": [
          "PackingList"
        ],
        "summary": "Get packing list position by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the packing list as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_PackingList"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/packinglist/receipt/{receiptNumber}": {
      "get": {
        "tags": [
          "PackingList"
        ],
        "summary": "Get packing list positions by receipt number",
        "parameters": [
          {
            "name": "receiptNumber",
            "in": "path",
            "description": "Unique numeric id of the packing list as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_PackingList"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/packinglist": {
      "get": {
        "tags": [
          "PackingList"
        ],
        "summary": "Get packing list positions",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_PackingList"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/packinglist/changed/{since}": {
      "get": {
        "tags": [
          "PackingList"
        ],
        "summary": "Get changed packing list positions",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_PackingList"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/packinglist/type/{type}": {
      "get": {
        "tags": [
          "PackingList"
        ],
        "summary": "Get packing list positions by type",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "Type of the packing list position ( 0 = supplier delivery, 1 = transfer, 2 = order)",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/PackingListType"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_PackingList"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/pattern/{id}": {
      "get": {
        "tags": [
          "Pattern"
        ],
        "summary": "Get pattern by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the pattern as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Pattern"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/pattern/number/{number}": {
      "get": {
        "tags": [
          "Pattern"
        ],
        "summary": "Get pattern by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the pattern as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Pattern"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/pattern": {
      "get": {
        "tags": [
          "Pattern"
        ],
        "summary": "Get patterns",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Pattern"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/pattern/changed/{since}": {
      "get": {
        "tags": [
          "Pattern"
        ],
        "summary": "Get changed patterns",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Pattern"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/payment/{id}": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Get payment by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the payment as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Payment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/payment/number/{number}": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Get payment positions by payment number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the payment as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Payment"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/payment": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Get payment positions",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Payment"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/payment/changed/{since}": {
      "get": {
        "tags": [
          "Payment"
        ],
        "summary": "Get changed payment positions",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Payment"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/paymentOption/{id}": {
      "get": {
        "tags": [
          "PaymentOption"
        ],
        "summary": "Get payment option by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the payment option as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_PaymentOption"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/paymentOption/number/{number}": {
      "get": {
        "tags": [
          "PaymentOption"
        ],
        "summary": "Get payment option by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the payment option as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_PaymentOption"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/paymentOption": {
      "get": {
        "tags": [
          "PaymentOption"
        ],
        "summary": "Get payment options",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_PaymentOption"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/paymentOption/changed/{since}": {
      "get": {
        "tags": [
          "PaymentOption"
        ],
        "summary": "Get changed payment options",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_PaymentOption"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/promotion/{id}": {
      "get": {
        "tags": [
          "Promotion"
        ],
        "summary": "Get promotion by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the promotion as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Promotion"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/promotion/number/{number}": {
      "get": {
        "tags": [
          "Promotion"
        ],
        "summary": "Get promotion by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the promotion as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Promotion"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/promotion": {
      "get": {
        "tags": [
          "Promotion"
        ],
        "summary": "Get promotions",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Promotion"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/promotion/changed/{since}": {
      "get": {
        "tags": [
          "Promotion"
        ],
        "summary": "Get changed promotions",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Promotion"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/promotion/redemption/{id}": {
      "get": {
        "tags": [
          "Promotion"
        ],
        "summary": "Get promotion redemption by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the promotion redemption as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_PromotionRedemption"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/promotion/redemption/receipt/{receiptNumber}": {
      "get": {
        "tags": [
          "Promotion"
        ],
        "summary": "Get promotion redemption by receipt number",
        "parameters": [
          {
            "name": "receiptNumber",
            "in": "path",
            "description": "Unique numeric id of the receipt as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_PromotionRedemption"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/promotion/redemption": {
      "get": {
        "tags": [
          "Promotion"
        ],
        "summary": "Get promotion redemptions",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_PromotionRedemption"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/promotion/redemption/changed/{since}": {
      "get": {
        "tags": [
          "Promotion"
        ],
        "summary": "Get changed promotion redemptions",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_PromotionRedemption"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/promotion/custom/redemption": {
      "get": {
        "tags": [
          "Promotion"
        ],
        "summary": "Get custom redemptions",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Custom_Promotion_Redeemed"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/promotion/custom/redemption/changed/{since}": {
      "get": {
        "tags": [
          "Promotion"
        ],
        "summary": "Get changed custom redemptions",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Custom_Promotion_Redeemed"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/promotion/custom/redemption/customer/{customerNumber}": {
      "get": {
        "tags": [
          "Promotion"
        ],
        "summary": "Get custom redemptions by customer",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Unique numeric id of the customer as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Custom_Promotion_Redeemed"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/promotionSelection": {
      "get": {
        "tags": [
          "PromotionSelection"
        ],
        "summary": "Get promotion selections",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_PromotionSelection"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/promotionSelection/changed/{since}": {
      "get": {
        "tags": [
          "PromotionSelection"
        ],
        "summary": "Get changed promotion selections",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_PromotionSelection"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/promotionSelection/number/{number}": {
      "get": {
        "tags": [
          "PromotionSelection"
        ],
        "summary": "Get promotion selection by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the promotion selection as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_PromotionSelection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/receipt/number/{number}": {
      "get": {
        "tags": [
          "Receipt"
        ],
        "summary": "Get receipt by type and number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the entity as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Receipt"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/receipt": {
      "get": {
        "tags": [
          "Receipt"
        ],
        "summary": "Get receipts",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "addNoSaleReceipt",
            "in": "query",
            "description": "If set no sale receipts are included",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Receipt"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      },
      "post": {
        "tags": [
          "Receipt"
        ],
        "summary": "Post receipt",
        "requestBody": {
          "description": "Receipt to be posted",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ReceiptCreate"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ReceiptCreate"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ReceiptCreate"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ReceiptCreate"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "424": {
            "description": "Client Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Receipt"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          },
          "415": {
            "description": "Method not allowed"
          }
        }
      }
    },
    "/api/v2/receipt/KeysetPaging": {
      "get": {
        "tags": [
          "Receipt"
        ],
        "summary": "Get receipts (experimental paging)",
        "parameters": [
          {
            "name": "PagingKey",
            "in": "query",
            "description": "Paging key returned in the header of the previous request (empty on first request)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "addNoSaleReceipt",
            "in": "query",
            "description": "If set no sale receipts are included",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "addNoLock",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Receipt"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/receipt/changed/{since}": {
      "get": {
        "tags": [
          "Receipt"
        ],
        "summary": "Get changed receipts",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "addNoSaleReceipt",
            "in": "query",
            "description": "If set no sale receipts are included",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Receipt"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/receipt/customer/{customerNumber}": {
      "get": {
        "tags": [
          "Receipt"
        ],
        "summary": "Get receipts by customer",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "addNoSaleReceipt",
            "in": "query",
            "description": "If set no sale receipts are included",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Unique numeric id of the customer as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Receipt"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/receipt/customer": {
      "get": {
        "tags": [
          "Receipt"
        ],
        "summary": "Get receipts by customer",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "addNoSaleReceipt",
            "in": "query",
            "description": "If set no sale receipts are included",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "customerNumber",
            "in": "query",
            "description": "Collection of ids to be included in the result e.g. ?customerNumber=1028&customerNumber=2147483647",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Receipt"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sale/{id}": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get sale by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the sale as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Sale"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sale/receipt/{receiptNumber}": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get sales by receipt number",
        "parameters": [
          {
            "name": "receiptNumber",
            "in": "path",
            "description": "Unique numeric id of the receipt as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Sale"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sale": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get sales",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Sale"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sale/changed/{since}": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get changed sales",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Sale"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sale/customer/{customerNumber}": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get sales by customer",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Unique numeric id of the customer as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Sale"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sale/customer/{customerNumber}/date/{date}": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get sales by customer and date",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Unique numeric id of the customer as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "date",
            "in": "path",
            "description": "Date of sale in the format YYYY-MM-DD e.g. 2019-01-31",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Sale"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sale/customer/{customerNumber}/date/range/{dateFrom}/{dateUntil}": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get sales by customer and date range",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Unique numeric id of the customer as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dateFrom",
            "in": "path",
            "description": "Start date of the range in the format YYYY-MM-DD e.g. 2019-01-31",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateUntil",
            "in": "path",
            "description": "End date of the range in the format YYYY-MM-DD e.g. 2019-01-31",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Sale"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sale/date/{date}": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get sales by date",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "date",
            "in": "path",
            "description": "Date of sale in the format YYYY-MM-DD e.g. 2019-01-31",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Sale"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sale/date/range/{dateFrom}/{dateUntil}": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get sales by date range",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dateFrom",
            "in": "path",
            "description": "Start date of the range in the format YYYY-MM-DD e.g. 2019-01-31",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateUntil",
            "in": "path",
            "description": "End date of the range in the format YYYY-MM-DD e.g. 2019-01-31",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Sale"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sale/customer/{customerNumber}/type/{type}": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get sales by customer and type",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Unique numeric id of the customer as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "Type of the sale (0 = customer sale, 1 = customer return, 2 = staff sale, 3 = staff return)",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaleType"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Sale"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sale/type/{type}": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get sales by type",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "Type of the sale (0 = customer sale, 1 = customer return, 2 = staff sale, 3 = staff return)",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/SaleType"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Sale"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sale/custom/{id}": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get custom sale by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the sale as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Custom_Sale"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sale/custom/receipt/{receiptNumber}": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get custom sales by receipt number",
        "parameters": [
          {
            "name": "receiptNumber",
            "in": "path",
            "description": "Unique numeric id of the receipt as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Custom_Sale"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sale/custom": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get custom sales",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Custom_Sale"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sale/custom/changed/{since}": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get changed custom sales",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Custom_Sale"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sale/custom/customer/{customerNumber}": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get custom sales by customer number",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Unique numeric id of the customer as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Custom_Sale"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sale/custom/customer/{customerNumber}/changed/{since}": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get changed custom sales by customer number",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Unique numeric id of the customer as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Custom_Sale"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sale/custom/customer/{customerNumber}/date/{date}": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get custom sales by customer number and date",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Unique numeric id of the customer as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "date",
            "in": "path",
            "description": "Date of the sale in the format YYYY-MM-DD e.g. 2019-01-31",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Custom_Sale"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sale/custom/customer/{customerNumber}/date/range/{dateFrom}/{dateUntil}": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get custom sales by customer and date range",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Unique numeric id of the customer as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dateFrom",
            "in": "path",
            "description": "Start date of the range in the format YYYY-MM-DD e.g. 2019-01-31",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateUntil",
            "in": "path",
            "description": "End date of the range in the format YYYY-MM-DD e.g. 2019-01-31",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Custom_Sale"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sale/custom/date/{date}": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get custom sales by date",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "date",
            "in": "path",
            "description": "Date of the sale in the format YYYY-MM-DD e.g. 2019-01-31",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Custom_Sale"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sale/custom/date/range/{dateFrom}/{dateUntil}": {
      "get": {
        "tags": [
          "Sale"
        ],
        "summary": "Get custom sales by date range",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "dateFrom",
            "in": "path",
            "description": "Start date of the range in the format YYYY-MM-DD e.g. 2019-01-31",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dateUntil",
            "in": "path",
            "description": "End date of the range in the format YYYY-MM-DD e.g. 2019-01-31",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Custom_Sale"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/season/{id}": {
      "get": {
        "tags": [
          "Season"
        ],
        "summary": "Get season by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the season as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Season"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/season/number/{number}": {
      "get": {
        "tags": [
          "Season"
        ],
        "summary": "Get season by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the season as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Season"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/season": {
      "get": {
        "tags": [
          "Season"
        ],
        "summary": "Get seasons",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Season"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/season/changed/{since}": {
      "get": {
        "tags": [
          "Season"
        ],
        "summary": "Get changed seasons",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Season"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/selection/{id}": {
      "get": {
        "tags": [
          "Selection"
        ],
        "summary": "Get selection by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the entity as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Selection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/selection/receipt/{receiptNumber}": {
      "get": {
        "tags": [
          "Selection"
        ],
        "summary": "Get selection by receipt number",
        "parameters": [
          {
            "name": "receiptNumber",
            "in": "path",
            "description": "Positive integer number. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Selection"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/selection/status/{status}/EAN/{ean}": {
      "get": {
        "tags": [
          "Selection"
        ],
        "summary": "Get open selections by EAN",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "Status of the selection (0 = open, 1 = to be returned, 2 = charged)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ean",
            "in": "path",
            "description": "EAN of the article size that is part of the open selection as a positive decimal value e.g. 1028",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Selection"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/selection": {
      "get": {
        "tags": [
          "Selection"
        ],
        "summary": "Get selections",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Selection"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/selection/changed/{since}": {
      "get": {
        "tags": [
          "Selection"
        ],
        "summary": "Get changed selections",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Selection"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/selection/custom/{id}": {
      "get": {
        "tags": [
          "Selection"
        ],
        "summary": "Get custom selection by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the entity as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Custom_Selection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/selection/custom/receipt/{receiptNumber}": {
      "get": {
        "tags": [
          "Selection"
        ],
        "summary": "Get custom selection by receipt number",
        "parameters": [
          {
            "name": "receiptNumber",
            "in": "path",
            "description": "Positive integer number. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Custom_Selection"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/selection/custom": {
      "get": {
        "tags": [
          "Selection"
        ],
        "summary": "Get custom selections",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Custom_Selection"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/selection/custom/changed/{since}": {
      "get": {
        "tags": [
          "Selection"
        ],
        "summary": "Get custom changed selections",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Custom_Selection"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/shape/{id}": {
      "get": {
        "tags": [
          "Shape"
        ],
        "summary": "Get shape by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the shape as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Shape"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/shape/number/{number}": {
      "get": {
        "tags": [
          "Shape"
        ],
        "summary": "Get shape by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the shape as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Shape"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/shape": {
      "get": {
        "tags": [
          "Shape"
        ],
        "summary": "Get shapes",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Shape"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/shape/changed/{since}": {
      "get": {
        "tags": [
          "Shape"
        ],
        "summary": "Get changed shapes",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Shape"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/shipmentOption/{id}": {
      "get": {
        "tags": [
          "ShipmentOption"
        ],
        "summary": "Get shipment option by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the shipment option as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_ShipmentOption"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/shipmentOption/number/{number}": {
      "get": {
        "tags": [
          "ShipmentOption"
        ],
        "summary": "Get shipment option by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the shipment option as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_ShipmentOption"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/shipmentOption": {
      "get": {
        "tags": [
          "ShipmentOption"
        ],
        "summary": "Get shipment option",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_ShipmentOption"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/shipmentOption/changed/{since}": {
      "get": {
        "tags": [
          "ShipmentOption"
        ],
        "summary": "Get changed shipment option",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_ShipmentOption"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/shop/{id}": {
      "get": {
        "tags": [
          "Shop"
        ],
        "summary": "Get shop by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the entity as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Shop"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/shop/number/{number}": {
      "get": {
        "tags": [
          "Shop"
        ],
        "summary": "Get shop by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the entity as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Shop"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/shop": {
      "get": {
        "tags": [
          "Shop"
        ],
        "summary": "Get shops",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Shop"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/shop/changed/{since}": {
      "get": {
        "tags": [
          "Shop"
        ],
        "summary": "Get changed shops",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Shop"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/shoppingCart/{id}": {
      "get": {
        "tags": [
          "ShoppingCart"
        ],
        "summary": "Get shopping cart by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the shopping cart as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_ShoppingCart"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/shoppingCart/customer/{customerNumber}": {
      "get": {
        "tags": [
          "ShoppingCart"
        ],
        "summary": "Get shopping cart by customer number",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Unique numeric id of the shopping carts customer as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_ShoppingCart"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/shoppingCart/staff/{staffNumber}": {
      "get": {
        "tags": [
          "ShoppingCart"
        ],
        "summary": "Get shopping cart by staff number",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "staffNumber",
            "in": "path",
            "description": "Unique numeric id of the shopping carts staff as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_ShoppingCart"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/shoppingCart": {
      "get": {
        "tags": [
          "ShoppingCart"
        ],
        "summary": "Get shopping carts",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_ShoppingCart"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      },
      "post": {
        "tags": [
          "ShoppingCart"
        ],
        "summary": "Create shopping cart",
        "requestBody": {
          "description": "Shopping cart data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ShoppingCart_Create"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ShoppingCart_Create"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ShoppingCart_Create"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_ShoppingCart_Create"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_ShoppingCart"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          },
          "415": {
            "description": "Method not allowed"
          }
        }
      }
    },
    "/api/v2/shoppingCart/changed/{since}": {
      "get": {
        "tags": [
          "ShoppingCart"
        ],
        "summary": "Get changed shopping carts",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_ShoppingCart"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/shoppingCart/{shoppingCartId}": {
      "delete": {
        "tags": [
          "ShoppingCart"
        ],
        "summary": "Delete shopping cart",
        "parameters": [
          {
            "name": "shoppingCartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/size/{id}": {
      "get": {
        "tags": [
          "Size"
        ],
        "summary": "Get size by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the entity as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Size"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/size/sizeGroupNumber/{sizeGroupNumber}": {
      "get": {
        "tags": [
          "Size"
        ],
        "summary": "Get sizes by group number",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sizeGroupNumber",
            "in": "path",
            "description": "Unique numeric id as a positive integer value as received from the size group endpoint. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Size"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/size": {
      "get": {
        "tags": [
          "Size"
        ],
        "summary": "Get sizes",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Size"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/size/changed/{since}": {
      "get": {
        "tags": [
          "Size"
        ],
        "summary": "Get changed sizes",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Size"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sizeClass/{id}": {
      "get": {
        "tags": [
          "SizeClass"
        ],
        "summary": "Get size class by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the entity as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_SizeClass"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sizeClass/number/{number}": {
      "get": {
        "tags": [
          "SizeClass"
        ],
        "summary": "Get size class by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the entity as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_SizeClass"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sizeClass": {
      "get": {
        "tags": [
          "SizeClass"
        ],
        "summary": "Get size classes",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_SizeClass"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sizeClass/changed/{since}": {
      "get": {
        "tags": [
          "SizeClass"
        ],
        "summary": "Get changed size classes",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_SizeClass"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sizeGroup/{id}": {
      "get": {
        "tags": [
          "SizeGroup"
        ],
        "summary": "Get size group by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the entity as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_SizeGroup"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sizeGroup/number/{number}": {
      "get": {
        "tags": [
          "SizeGroup"
        ],
        "summary": "Get size group by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the entity as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_SizeGroup"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sizeGroup": {
      "get": {
        "tags": [
          "SizeGroup"
        ],
        "summary": "Get size groups",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_SizeGroup"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/sizeGroup/changed/{since}": {
      "get": {
        "tags": [
          "SizeGroup"
        ],
        "summary": "Get changed size groups",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_SizeGroup"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/specialPrice/{id}": {
      "get": {
        "tags": [
          "SpecialPrice"
        ],
        "summary": "Get special price by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the entity as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_SpecialPrice"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/specialPrice/type/{type}": {
      "get": {
        "tags": [
          "SpecialPrice"
        ],
        "summary": "Get special prices by type",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "Type of special price to return (Valid values: 101)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_SpecialPrice"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/specialPrice/type/{type}/changed/{since}": {
      "get": {
        "tags": [
          "SpecialPrice"
        ],
        "summary": "Get changed special prices by type",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Type of special price to return (Valid values: 101)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_SpecialPrice"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/specialPrice/type/{type}/validity/changed/{since}": {
      "get": {
        "tags": [
          "SpecialPrice"
        ],
        "summary": "Get validity changed special prices by type",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Type of special price to return (Valid values: 101)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "since",
            "in": "path",
            "description": "Date to specify validFrom and validUntil values to return e.g. 2019-01-31",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_SpecialPrice"
                  }
                }
              }
            }
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/specialPrice/type/{type}/productVariant/{productVariantId}": {
      "get": {
        "tags": [
          "SpecialPrice"
        ],
        "summary": "Get special price by type and variant id",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Type of special price to return (Valid values: 101)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "productVariantId",
            "in": "path",
            "description": "Unique id of the product variant as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_SpecialPrice"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/specialPrice/type/{type}/product/{productId}": {
      "get": {
        "tags": [
          "SpecialPrice"
        ],
        "summary": "Get special price by type and product id",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Type of special price to return (Valid values: 101)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "description": "Unique id of the product as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_SpecialPrice"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/specialPrice/type/{type}/articleSize/{articleSizeId}": {
      "get": {
        "tags": [
          "SpecialPrice"
        ],
        "summary": "Get special prices by type and articleSize id",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Type of special price to return (Valid values: 101)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "articleSizeId",
            "in": "path",
            "description": "Unique id of the article size as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_SpecialPrice"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/specialPrice/type/{type}/articleSize/number/{articleSizeNumber}": {
      "get": {
        "tags": [
          "SpecialPrice"
        ],
        "summary": "Get special prices by type and articleSize number",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Type of special price to return (Valid values: 101)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "articleSizeNumber",
            "in": "path",
            "description": "Number of the article size",
            "required": true,
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_SpecialPrice"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/specialPrice/branch/{branchNumber}/type/{type}": {
      "get": {
        "tags": [
          "SpecialPrice"
        ],
        "summary": "Get special prices by branch and type",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "branchNumber",
            "in": "path",
            "description": "Unique numeric id of the branch as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "Type of special price to return (Valid values: 101)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_SpecialPrice"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/specialPrice/branch/{branchNumber}/type/{type}/changed/{since}": {
      "get": {
        "tags": [
          "SpecialPrice"
        ],
        "summary": "Get changed special prices by branch and type",
        "parameters": [
          {
            "name": "branchNumber",
            "in": "path",
            "description": "Unique numeric id of the branch as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "Type of special price to return (Valid values: 101)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_SpecialPrice"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/specialPrice/branch/{branchNumber}/type/{type}/validity/changed/{since}": {
      "get": {
        "tags": [
          "SpecialPrice"
        ],
        "summary": "Get validity changed special prices by branch and type",
        "parameters": [
          {
            "name": "branchNumber",
            "in": "path",
            "description": "Unique numeric id of the branch as a positive integer value e.g. 1028. Maximum allowed value is 2147483647",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "Type of special price to return (Valid values: 101)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "since",
            "in": "path",
            "description": "Date to specify validFrom and validUntil values to return e.g. 2019-01-31",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_SpecialPrice"
                  }
                }
              }
            }
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/staff/{id}": {
      "get": {
        "tags": [
          "Staff"
        ],
        "summary": "Get staff by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the entity as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Staff"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/staff/number/{number}": {
      "get": {
        "tags": [
          "Staff"
        ],
        "summary": "Get staff by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the entity as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Staff"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/staff": {
      "get": {
        "tags": [
          "Staff"
        ],
        "summary": "Get staff",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Staff"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/staff/changed/{since}": {
      "get": {
        "tags": [
          "Staff"
        ],
        "summary": "Get changed staff",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Staff"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/status/synchronization": {
      "get": {
        "tags": [
          "Status"
        ],
        "summary": "Get synchronization status",
        "description": "Provides information on the current status of the internal sychronization between ERP and cloud.\r\nA normal synchronization cycle runs every 15 seconds. This process may stall the timer for a short period in case many changes need to be synchronized.\r\nA value older than an hour may indicate a (temporary) problem with the internal synchronization that needs to be taken care of.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Status"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/supplier/{id}": {
      "get": {
        "tags": [
          "Supplier"
        ],
        "summary": "Get supplier by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the entity as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Supplier"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/supplier/number/{number}": {
      "get": {
        "tags": [
          "Supplier"
        ],
        "summary": "Get supplier by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the entity as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Supplier"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/supplier": {
      "get": {
        "tags": [
          "Supplier"
        ],
        "summary": "Get suppliers",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Supplier"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/supplier/changed/{since}": {
      "get": {
        "tags": [
          "Supplier"
        ],
        "summary": "Get changed suppliers",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Supplier"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/supplierreturn": {
      "get": {
        "tags": [
          "SupplierReturn"
        ],
        "summary": "Get packing list positions",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_SupplierReturn"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/supplierreturn/changed/{since}": {
      "get": {
        "tags": [
          "SupplierReturn"
        ],
        "summary": "Get changed packing list positions",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_SupplierReturn"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/targetGroup/{id}": {
      "get": {
        "tags": [
          "TargetGroup"
        ],
        "summary": "Get target group by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the entity as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_TargetGroup"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/targetGroup/number/{number}": {
      "get": {
        "tags": [
          "TargetGroup"
        ],
        "summary": "Get target group by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the entity as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_TargetGroup"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/targetGroup": {
      "get": {
        "tags": [
          "TargetGroup"
        ],
        "summary": "Get target groups",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_TargetGroup"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/targetGroup/changed/{since}": {
      "get": {
        "tags": [
          "TargetGroup"
        ],
        "summary": "Get changed target groups",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_TargetGroup"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/text/{id}": {
      "get": {
        "tags": [
          "Text"
        ],
        "summary": "Get text by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the entity as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Text"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/text/type/{type}/number/{number}": {
      "get": {
        "tags": [
          "Text"
        ],
        "summary": "Get text by type and number",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Type of texts to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the entity as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Text"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/text": {
      "get": {
        "tags": [
          "Text"
        ],
        "summary": "Get texts",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Text"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/text/changed/{since}": {
      "get": {
        "tags": [
          "Text"
        ],
        "summary": "Get changed texts",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Text"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/text/type/{type}": {
      "get": {
        "tags": [
          "Text"
        ],
        "summary": "Get texts by type",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "type",
            "in": "path",
            "description": "Type of texts to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Text"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/voucher/{id}": {
      "get": {
        "tags": [
          "Voucher"
        ],
        "summary": "Get voucher by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the entity as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Voucher"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/voucher/number/{number}": {
      "get": {
        "tags": [
          "Voucher"
        ],
        "summary": "Get voucher by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the entity as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Voucher"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/voucher/code/{code}": {
      "get": {
        "tags": [
          "Voucher"
        ],
        "summary": "Get voucher by internet code",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Internet code of the voucher",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Voucher"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/voucher": {
      "get": {
        "tags": [
          "Voucher"
        ],
        "summary": "Get vouchers",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Voucher"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      },
      "post": {
        "tags": [
          "Voucher"
        ],
        "summary": "Create voucher",
        "requestBody": {
          "description": "Voucher data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_Voucher_Create"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_Voucher_Create"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_Voucher_Create"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_Voucher_Create"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Voucher"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          },
          "415": {
            "description": "Method not allowed"
          }
        }
      }
    },
    "/api/v2/voucher/customer/{customerNumber}/status/{status}": {
      "get": {
        "tags": [
          "Voucher"
        ],
        "summary": "Get vouchers by customer and status",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Unique numeric id as a positive integer value as received from the customer endpoint. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "Status whether the full amount of the voucher has been redeemed (1 = fully redeemed, 0 = open)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Voucher"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/voucher/status/{status}": {
      "get": {
        "tags": [
          "Voucher"
        ],
        "summary": "Get vouchers by status",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "Status whether the full amount of the voucher has been redeemed (1 = fully redeemed, 0 = open)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Voucher"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/voucher/changed/{since}": {
      "get": {
        "tags": [
          "Voucher"
        ],
        "summary": "Get changed vouchers",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Voucher"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/voucher/redemption/{id}": {
      "get": {
        "tags": [
          "Voucher"
        ],
        "summary": "Get redeemed voucher by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the entity as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Voucher_Redeemed"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/voucher/redemption/number/{number}": {
      "get": {
        "tags": [
          "Voucher"
        ],
        "summary": "Get redeemed voucher by number",
        "parameters": [
          {
            "name": "number",
            "in": "path",
            "description": "Unique numeric id of the entity as a positive integer value e.g. 1028. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Voucher_Redeemed"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/voucher/redemption": {
      "get": {
        "tags": [
          "Voucher"
        ],
        "summary": "Get redeemed vouchers",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Voucher_Redeemed"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/voucher/redemption/changed/{since}": {
      "get": {
        "tags": [
          "Voucher"
        ],
        "summary": "Get changed redeemed vouchers",
        "parameters": [
          {
            "name": "since",
            "in": "path",
            "description": "Timestamp to specify after which point in time changed data is returned. Format the timestamp according to ISO 8601 including timezone information e.g. 2019-01-31T13:23:29",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Voucher_Redeemed"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/voucher/redemption/customer/{customerNumber}/status/{status}": {
      "get": {
        "tags": [
          "Voucher"
        ],
        "summary": "Get redeemed vocuhers by customer and status",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Unique numeric id as a positive integer value as received from the customer endpoint. Maximum allowed value is 2147483647.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "Status whether the full amount of the voucher has been redeemed (1 = fully redeemed, 0 = open)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Voucher_Redeemed"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/voucher/redemption/status/{status}": {
      "get": {
        "tags": [
          "Voucher"
        ],
        "summary": "Get redeemed vouchers by status",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "description": "Requested data is divided into pages. Default value is 1 and returns the first page.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Amount of entites returned on a page. If ommited default value of 20 is used. If set value is too high, requests may time out.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "status",
            "in": "path",
            "description": "Status whether the full amount of the voucher has been redeemed (1 = fully redeemed, 0 = open)",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_Voucher_Redeemed"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/voucher/redeem/{voucherId}": {
      "post": {
        "tags": [
          "Voucher"
        ],
        "summary": "Redeem voucher",
        "parameters": [
          {
            "name": "voucherId",
            "in": "path",
            "description": "Unique id of the entity as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Voucher redmeption data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_VoucherRedemption"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_VoucherRedemption"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_VoucherRedemption"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_VoucherRedemption"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_Voucher_Redeemed"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          },
          "415": {
            "description": "Method not allowed"
          }
        }
      }
    },
    "/api/v2/voucher/reserve": {
      "post": {
        "tags": [
          "Voucher"
        ],
        "summary": "Create voucher reservation",
        "requestBody": {
          "description": "Voucher reservation data",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_VoucherReservation_Create"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_VoucherReservation_Create"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_VoucherReservation_Create"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DTO_VoucherReservation_Create"
              }
            }
          }
        },
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_VoucherReservation"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          },
          "415": {
            "description": "Method not allowed"
          }
        }
      }
    },
    "/api/v2/voucher/reservation/{id}": {
      "get": {
        "tags": [
          "Voucher"
        ],
        "summary": "Get voucher reservation by reservation id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the entity as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DTO_VoucherReservation"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    },
    "/api/v2/voucher/reservation/{id}/cancel": {
      "post": {
        "tags": [
          "Voucher"
        ],
        "summary": "Cancel voucher reservation by reservation id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the entity as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          },
          "415": {
            "description": "Method not allowed"
          }
        }
      }
    },
    "/api/v2/voucher/{id}/reservations": {
      "get": {
        "tags": [
          "Voucher"
        ],
        "summary": "Get voucher reservations by voucher id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique id of the entity as a GUID in the format 00000000-0000-0000-0000-000000000000",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DTO_VoucherReservation"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Access denied"
          },
          "422": {
            "description": "Invalid tenant"
          },
          "500": {
            "description": "Internal server error"
          },
          "423": {
            "description": "Locked"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BonusTypes": {
        "enum": [
          0,
          1,
          2,
          4,
          8
        ],
        "type": "integer",
        "format": "int32"
      },
      "CustomerOrderStatus": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          98,
          99
        ],
        "type": "integer",
        "description": "* Status in Auftrag oder Auftragsposition\r\n* Status in order or orderposition",
        "format": "int32"
      },
      "DTO_Article": {
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean",
            "description": "* Makiert den Artikel als aktiv\r\n* Defines the article as active",
            "nullable": true
          },
          "imageName": {
            "type": "string",
            "description": "* Bildname für den Artikel\r\n* Imagename of the article",
            "nullable": true
          },
          "individualArticleNumber": {
            "type": "string",
            "description": "* Eigene Artikelnummer des Händlers\r\n* Individually given articlenumber by the retailer",
            "nullable": true
          },
          "purchasePrice": {
            "type": "number",
            "description": "* Einkaufspreis des Artikels\r\n* Purchase price of the article",
            "format": "double",
            "nullable": true
          },
          "firstPurchaseDate": {
            "type": "string",
            "description": "* Erstes Einkaufsdatum des Artikels\r\n* Date the article was first purchased",
            "format": "date-time",
            "nullable": true
          },
          "lastPurchaseDate": {
            "type": "string",
            "description": "* Letzes Einkaufsdatum des Artikels\r\n* Date the article was last purchased",
            "format": "date-time",
            "nullable": true
          },
          "sizeType": {
            "type": "string",
            "description": "* Typ der Größen (z.B.: EU, US oder UK)\r\n* Typ for sizes (e.g.: EU, US or UK)",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "manufacturerNumber": {
            "type": "integer",
            "description": "* Hersteller Nummer (Lieferant Endpunkt)\r\n* Manufacturer number (Supplier endpoint)",
            "format": "int32",
            "nullable": true
          },
          "information": {
            "type": "string",
            "description": "* Informationen über den Artikel\r\n* Information about the article",
            "nullable": true
          },
          "articleFlag": {
            "type": "string",
            "description": "* Artikelkennzeichen\r\n* Article flag",
            "nullable": true
          },
          "supplierArticleNumber": {
            "type": "string",
            "description": "* Artikelnummer laut Lieferant\r\n* Atticlenumber given by the supplier",
            "nullable": true
          },
          "supplierColor": {
            "type": "string",
            "description": "* Farbbezeichnung laut Lieferant\r\n* Colorname given by the supplier",
            "nullable": true
          },
          "supplierSeason": {
            "type": "string",
            "description": "* Saison laut Lieferant\r\n* Season given by the supplier",
            "nullable": true
          },
          "supplierCategory": {
            "type": "string",
            "description": "* Warengruppe laut Lieferant\r\n* Category given by the supplier",
            "nullable": true
          },
          "isNOS": {
            "type": "boolean",
            "description": "* Kennzeichnet den Artikel als NOS\r\n* Flag that defines the article as NOS",
            "nullable": true
          },
          "number": {
            "type": "number",
            "description": "* Interne Artikelnummer\r\n* Internal article number",
            "format": "double",
            "nullable": true
          },
          "firstOrderDate": {
            "type": "string",
            "description": "* Erstes Orderdatum des Artikels\r\n* Date the article was first ordered",
            "format": "date-time",
            "nullable": true
          },
          "lastOrderDate": {
            "type": "string",
            "description": "* Letzes Orderdatum des Artikels\r\n* Date the article was last ordered",
            "format": "date-time",
            "nullable": true
          },
          "gender": {
            "type": "integer",
            "description": "* Geschlecht des Artikels\r\n* Gender of the article",
            "format": "int32",
            "nullable": true
          },
          "text1": {
            "type": "string",
            "description": "* Artikelbeschreibung 1\r\n* Article description 1",
            "nullable": true
          },
          "text2": {
            "type": "string",
            "description": "* Artikelbeschreibung 2\r\n* Article description 2",
            "nullable": true
          },
          "text3": {
            "type": "string",
            "description": "* Artikelbeschreibung 3\r\n* Article description 3",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "* Verkaufspreis des Artikels\r\n* Price the article sales for",
            "format": "double",
            "nullable": true
          },
          "firstSaleDate": {
            "type": "string",
            "description": "* Erstes Verkaufsdatum des Artikels\r\n* Date the article was first sold",
            "format": "date-time",
            "nullable": true
          },
          "lastSaleDate": {
            "type": "string",
            "description": "* Letzes Verkaufsdatum des Artikels\r\n* Date the article was last sold",
            "format": "date-time",
            "nullable": true
          },
          "labelPrice": {
            "type": "number",
            "description": "* Etikettenpreis\r\n* Price on the label of the article",
            "format": "double",
            "nullable": true
          },
          "calculatedPrice": {
            "type": "number",
            "description": "* Vorab kalkulierter Verkaufspreis\r\n* Price previously calculated for the article",
            "format": "double",
            "nullable": true
          },
          "patternNumber": {
            "type": "integer",
            "description": "* Muster-Nummer\r\n* Pattern number",
            "format": "int32",
            "nullable": true
          },
          "labelNumber": {
            "type": "integer",
            "description": "* Etikettentyp-Nummer\r\n* Labeltype number",
            "format": "int32",
            "nullable": true
          },
          "colorNumber": {
            "type": "integer",
            "description": "* Farb-Nummer\r\n* Color number",
            "format": "int32",
            "nullable": true
          },
          "shapeNumber": {
            "type": "integer",
            "description": "* Form-Nummer\r\n* Shape number",
            "format": "int32",
            "nullable": true
          },
          "currencyNumber": {
            "type": "string",
            "description": "* Währung-Nummer\r\n* Currency number",
            "nullable": true
          },
          "countryNumber": {
            "type": "string",
            "description": "* Land-Nummer\r\n* Country number",
            "nullable": true
          },
          "brandNumber": {
            "type": "integer",
            "description": "* Label-Nummer\r\n* Brand number",
            "format": "int32",
            "nullable": true
          },
          "supplierNumber": {
            "type": "integer",
            "description": "* Lieferanten-Nummer\r\n* Supplier number",
            "format": "int32",
            "nullable": true
          },
          "materialNumber": {
            "type": "integer",
            "description": "* Material-Nummer\r\n* Material number",
            "format": "int32",
            "nullable": true
          },
          "priceUnitNumber": {
            "type": "string",
            "description": "* Preiseinheit-Nummer\r\n* Price unit number",
            "nullable": true
          },
          "seasonNumber": {
            "type": "integer",
            "description": "* Saison-Nummer\r\n* Season number",
            "format": "int32",
            "nullable": true
          },
          "shopNumber": {
            "type": "integer",
            "description": "* Shop-Nummer\r\n* Shop number",
            "format": "int32",
            "nullable": true
          },
          "categoryNumber": {
            "type": "integer",
            "description": "* Warengruppe-Nummer\r\n* Category Number",
            "format": "int32",
            "nullable": true
          },
          "targetGroupNumber": {
            "type": "integer",
            "description": "* Zielgruppen-Nummer\r\n* Target group number",
            "format": "int32",
            "nullable": true
          },
          "functionNumber": {
            "type": "integer",
            "description": "* Funktion-Nummer\r\n* Function number",
            "format": "int32",
            "nullable": true
          },
          "brochure": {
            "type": "string",
            "description": "* Prospekt\r\n* Brochure",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitpunkt der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet den Artikel als gelöscht\r\n* Flags the article as deleted"
          },
          "basePrice": {
            "type": "number",
            "description": "* Basispreis pro Mengeneinheit des Artikels\r\n* Base price for each price unit of the article",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Artikel\r\n* Article"
      },
      "DTO_ArticleSize": {
        "type": "object",
        "properties": {
          "articleNumber": {
            "type": "number",
            "description": "* Artikel-Nummer\r\n* Article number",
            "format": "double",
            "nullable": true
          },
          "branchNumber": {
            "type": "integer",
            "description": "* Filiale-Nummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "string",
            "description": "* Größe\r\n* Size",
            "nullable": true
          },
          "sizeGroup": {
            "type": "integer",
            "description": "* Größengruppe\r\n* Size group",
            "format": "int32",
            "nullable": true
          },
          "ean": {
            "type": "number",
            "description": "* EAN (Enthält Artikel EAN, wenn nicht gefüllt number Feld benutzen)\r\n* EAN (Contains article ean, if empty use number field)",
            "format": "double",
            "nullable": true
          },
          "purchasePrice": {
            "type": "number",
            "description": "* Einkaufspreis\r\n* Purchase price",
            "format": "double",
            "nullable": true
          },
          "firstPurchaseDate": {
            "type": "string",
            "description": "* Erstes Einkaufsdatum\r\n* Date the size was first purchased",
            "format": "date-time",
            "nullable": true
          },
          "lastPurchaseDate": {
            "type": "string",
            "description": "* Letzes Einkaufsdatum\r\n* Date the size was last purchased",
            "format": "date-time",
            "nullable": true
          },
          "fifo": {
            "type": "boolean",
            "description": "* Kennzeichnet die Größe als FIFO\r\n* Flags that defines the size as FIFO",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "volumeUnit": {
            "type": "number",
            "description": "* Mengeneinheit (z.B.: 50ml oder 1,2Kg)\r\n* Valume unit (e.g: 50ml or 1,2Kg)",
            "format": "double",
            "nullable": true
          },
          "isNOS": {
            "type": "boolean",
            "description": "* Kennzeichnet den Größe als NOS\r\n* Flag that defines the size as NOS",
            "nullable": true
          },
          "number": {
            "type": "number",
            "description": "* Interne Nummer zur identifikation der Größe\r\n* Internal number to identify the size",
            "format": "double",
            "nullable": true
          },
          "salePrice": {
            "type": "number",
            "description": "* Verkaufspreis\r\n* Price the size sales for",
            "format": "double",
            "nullable": true
          },
          "firstSaleDate": {
            "type": "string",
            "description": "* Erstes Verkaufsdatum\r\n* Date the size was first sold",
            "format": "date-time",
            "nullable": true
          },
          "lastSaleDate": {
            "type": "string",
            "description": "* Letzes Verkaufsdatum\r\n* Date the size was last sold",
            "format": "date-time",
            "nullable": true
          },
          "labelPrice": {
            "type": "number",
            "description": "* Etikettenpreis\r\n* Price on the label of the size",
            "format": "double",
            "nullable": true
          },
          "currencyNumber": {
            "type": "string",
            "description": "* Währung-Nummer\r\n* Currency number",
            "nullable": true
          },
          "priceUnitNumber": {
            "type": "string",
            "description": "* Preiseinheit-Nummer\r\n* Priceunit number",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitpunkt der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Artikel-Variante als gelöscht\r\n* Flags the article variant as deleted"
          },
          "stockQuantity": {
            "type": "number",
            "description": "* Bestand (selectionQuantity abziehen)\r\n* Stock (substract selectionQuantity)",
            "format": "double",
            "nullable": true
          },
          "selectionQuantity": {
            "type": "number",
            "description": "* Bestand in Auswahl\r\n* Stock in selection",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Größen für die Warenwirtschafts Artikel\r\n* Sizes for the ERP articles"
      },
      "DTO_Branch": {
        "type": "object",
        "properties": {
          "stateNumber": {
            "type": "integer",
            "description": "* Bundesland-Nummer\r\n* State number",
            "format": "int32",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "description": "* Kennzeichnet die Filiale als aktiv\r\n* Flag that defines the branch as active",
            "nullable": true
          },
          "imageName": {
            "type": "string",
            "description": "* Bildname\r\n* Imagename",
            "nullable": true
          },
          "bankCode": {
            "type": "integer",
            "description": "* Bankleitzahl\r\n* Bankcode",
            "format": "int32",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "* E-Mail Adresse\r\n* E-Mail address",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "description": "* Fax-Nummer\r\n* Fax number",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "iban": {
            "type": "string",
            "description": "* IBAN\r\n* IBAN",
            "nullable": true
          },
          "glN1": {
            "type": "number",
            "description": "* GLN für Import\r\n* GLN for import",
            "format": "double",
            "nullable": true
          },
          "glN2": {
            "type": "number",
            "description": "* GLN für Export\r\n* GLN for export",
            "format": "double",
            "nullable": true
          },
          "branchInfo": {
            "type": "string",
            "description": "* Informationen über die Filiale\r\n* Information about the branch",
            "nullable": true
          },
          "isWebshop": {
            "type": "boolean",
            "description": "* Kennzeichnet die Filiale als Webfiliale\r\n* Flag that defines the branch as webshop",
            "nullable": true
          },
          "stocktakingDate": {
            "type": "string",
            "description": "* Inventur-Stichtag\r\n* Date the stocktaking takes place",
            "format": "date-time",
            "nullable": true
          },
          "bankAccount": {
            "type": "string",
            "description": "* Konto-Nummer\r\n* Bankaccount number",
            "nullable": true
          },
          "logoFileName": {
            "type": "string",
            "description": "* Bildname für ein Firmenlogo\r\n* Imagename for a company logo",
            "nullable": true
          },
          "searchTerm": {
            "type": "string",
            "description": "* Suchwort der Filiale\r\n* Searchterm for the branch",
            "nullable": true
          },
          "name1": {
            "type": "string",
            "description": "* Filialname 1\r\n* Branch name 1",
            "nullable": true
          },
          "name2": {
            "type": "string",
            "description": "* Filialname 2\r\n* Branch name 2",
            "nullable": true
          },
          "name3": {
            "type": "string",
            "description": "* Filialename 3\r\n* Branch name 3",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "* Filial-Nummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "* Stadt\r\n* City",
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "description": "* Postleitzahl\r\n* ZIP code",
            "nullable": true
          },
          "street": {
            "type": "string",
            "description": "* Straße\r\n* Street",
            "nullable": true
          },
          "bic": {
            "type": "string",
            "description": "* BIC\r\n* BIC",
            "nullable": true
          },
          "telephoneNumber": {
            "type": "string",
            "description": "* Telefon-Nummer\r\n* Telephone number",
            "nullable": true
          },
          "countryNumber": {
            "type": "string",
            "description": "* Land-Nummer\r\n* Country number",
            "nullable": true
          },
          "regionNumber": {
            "type": "integer",
            "description": "* Region-Nummer\r\n* Region number",
            "format": "int32",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Filiale als gelöscht\r\n* Flags the branch as deleted"
          },
          "openMonday": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_Branch_OpeningHours"
            },
            "description": "* Öffnungszeiten Montag\r\n* Opening hours for monday",
            "nullable": true
          },
          "openTuesday": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_Branch_OpeningHours"
            },
            "description": "* Öffnungszeiten Dienstag\r\n* Opening hours for tuesday",
            "nullable": true
          },
          "openWednesday": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_Branch_OpeningHours"
            },
            "description": "* Öffnungszeiten Mittwoch\r\n* Opening hours for wednesday",
            "nullable": true
          },
          "openThursday": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_Branch_OpeningHours"
            },
            "description": "* Öffnungszeiten Donnerstag\r\n* Opening hours for thursday",
            "nullable": true
          },
          "openFriday": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_Branch_OpeningHours"
            },
            "description": "* Öffnungszeiten Freitag\r\n* Opening hours for friday",
            "nullable": true
          },
          "openSaturday": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_Branch_OpeningHours"
            },
            "description": "* Öffnungszeiten Samstag\r\n* Opening hours for saturday",
            "nullable": true
          },
          "openSunday": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_Branch_OpeningHours"
            },
            "description": "* Öffnungszeiten Sonntag\r\n* Opening hours for sunday",
            "nullable": true
          },
          "filzeitMOvon1": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitMObis1": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitMOvon2": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitMObis2": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitDIvon1": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitDIbis1": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitDIvon2": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitDIbis2": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitMIvon1": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitMIbis1": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitMIvon2": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitMIbis2": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitDOvon1": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitDObis1": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitDOvon2": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitDObis2": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitFRvon1": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitFRbis1": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitFRvon2": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitFRbis2": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitSAvon1": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitSAbis1": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitSAvon2": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitSAbis2": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitSOvon1": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitSObis1": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitSOvon2": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "filzeitSObis2": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Filiale\r\n* Branch"
      },
      "DTO_Branch_OpeningHours": {
        "type": "object",
        "properties": {
          "von": {
            "type": "string",
            "nullable": true
          },
          "bis": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_CashRegisterPaymentOption": {
        "type": "object",
        "properties": {
          "paymentOptionNumber": {
            "type": "integer",
            "description": "* Zahlungsart-Nummer\r\n* Payment option number",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "* Name der Zahlungsart\r\n* Name of the payment option",
            "nullable": true
          },
          "currencyNumber": {
            "type": "string",
            "description": "* Währung-Nummer\r\n* Currency number",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Zahlunsart als gelöscht\r\n* Flags the payment option as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Zahlungsart\r\n* Payment option"
      },
      "DTO_Category": {
        "type": "object",
        "properties": {
          "departmentNumber": {
            "type": "integer",
            "description": "* Abteilung-Nummer\r\n* Department number",
            "format": "int32",
            "nullable": true
          },
          "labelNumber": {
            "type": "integer",
            "description": "* Etikettentyp-Nummer\r\n* Label type number",
            "format": "int32",
            "nullable": true
          },
          "mainDepartmentNumber": {
            "type": "integer",
            "description": "* Hauptabteilung-Nummer\r\n* Main department number",
            "format": "int32",
            "nullable": true
          },
          "mainCategoryNumber": {
            "type": "integer",
            "description": "* Hauptwarengruppe-Nummer\r\n* Main category number",
            "format": "int32",
            "nullable": true
          },
          "generalCategoryNumber": {
            "type": "integer",
            "description": "* Oberwarengruppe\r\n* General category number",
            "format": "int32",
            "nullable": true
          },
          "taxNumber": {
            "type": "integer",
            "description": "* Steuersatz-Nummer\r\n* Tax number",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "* Name\r\n* Name",
            "nullable": true
          },
          "isServiceCategory": {
            "type": "boolean",
            "description": "* Kennzeichnet die Warengruppe als Dienstleistung-Wwarengruppe\r\n* Flags that defines the category as service category",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Undeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "searchTerm": {
            "type": "string",
            "description": "* Suchwort für die Warengruppe\r\n* Searchterm for the category",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "* Warengruppe-Nummer\r\n* Category number",
            "format": "int32",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Warengruppe als gelöscht\r\n* Flags the category as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Warengruppe\r\n* Category"
      },
      "DTO_Color": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "* Name der Farbe\r\n* Name of the color",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "searchTerm": {
            "type": "string",
            "description": "* Suchwort für die Farbe\r\n* Searchterm for the color",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "* Farb-Nummer\r\n* Color number",
            "format": "int32",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Farbe als gelöscht\r\n* Flags the color as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Farbe\r\n* Color"
      },
      "DTO_Country": {
        "type": "object",
        "properties": {
          "currencyNumber": {
            "type": "string",
            "description": "* Währung-Nummer\r\n* Currency number",
            "nullable": true
          },
          "countryName": {
            "type": "string",
            "description": "* Name des Lands\r\n* Name of the country",
            "nullable": true
          },
          "domain": {
            "type": "string",
            "description": "* Domäne des Lands\r\n* Domain of the land",
            "nullable": true
          },
          "isEU": {
            "type": "boolean",
            "description": "* Kennzeichen das angibt ob es sich um ein EU Land handelt\r\n* Flag that defines the country as EU country",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "isoAlpha2": {
            "type": "string",
            "description": "* ISO alpha-2\r\n* ISO alpha-2",
            "nullable": true
          },
          "isoAlpha3": {
            "type": "string",
            "description": "* ISO alpha-3\r\n* ISO alpha-3",
            "nullable": true
          },
          "searchTerm": {
            "type": "string",
            "description": "* Suchwort für das Land\r\n* Searchterm for the country",
            "nullable": true
          },
          "number": {
            "type": "string",
            "description": "* Land-Nummer\r\n* Country number",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet das Land als gelöscht\r\n* Flags the country as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Land\r\n* Country"
      },
      "DTO_Credit": {
        "type": "object",
        "properties": {
          "branchNumber": {
            "type": "integer",
            "description": "* Filiale-Nummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "receiptNumber": {
            "type": "integer",
            "description": "* Bon-Nummer\r\n* Receipt number",
            "format": "int32",
            "nullable": true
          },
          "receiptPosition": {
            "type": "integer",
            "description": "* Position auf dem Bon\r\n* Position on the receipt",
            "format": "int32",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "* Datum\r\n* Date",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "number": {
            "type": "integer",
            "description": "* Gutschrift-Nummer\r\n* Credit number",
            "format": "int32",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "description": "* Status (0 = offen, 1 = erledigt)\r\n* Status (0 = open, 1 = cleared)",
            "format": "int32",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "* Wert \r\n* Value",
            "format": "double",
            "nullable": true
          },
          "customerNumber": {
            "type": "integer",
            "description": "* Kunden-Nummer\r\n* Customer number",
            "format": "int32",
            "nullable": true
          },
          "currencyNumber": {
            "type": "string",
            "description": "* Währung-Nummer\r\n* Currency number",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Gutschrift als gelöscht\r\n* Flags the credit as deleted"
          },
          "amountRedeemed": {
            "type": "number",
            "description": "* Eingelöster Wert\r\n* Redeemed amount",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Gutschrift\r\n* Credit"
      },
      "DTO_Credit_Redeemed": {
        "type": "object",
        "properties": {
          "branchNumber": {
            "type": "integer",
            "description": "* Filiale-Nummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "receiptNumber": {
            "type": "integer",
            "description": "* Bon-Nummer\r\n* Receipt number",
            "format": "int32",
            "nullable": true
          },
          "receiptPosition": {
            "type": "integer",
            "description": "* Position auf dem Bon\r\n* Position on the receipt",
            "format": "int32",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "* Datum\r\n* Date",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "number": {
            "type": "integer",
            "description": "* Gutschrift-Nummer\r\n* Credit number",
            "format": "int32",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "description": "* Status (0 = offen, 1 = erledigt)\r\n* Status (0 = open, 1 = cleared)",
            "format": "int32",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "* Wert \r\n* Value",
            "format": "double",
            "nullable": true
          },
          "customerNumber": {
            "type": "integer",
            "description": "* Kunden-Nummer\r\n* Customer number",
            "format": "int32",
            "nullable": true
          },
          "currencyNumber": {
            "type": "string",
            "description": "* Währung-Nummer\r\n* Currency number",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Gutschrift als gelöscht\r\n* Flags the credit as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Einlösung einer Gutschrift\r\n* Redemption of a credit"
      },
      "DTO_Currency": {
        "type": "object",
        "properties": {
          "unit": {
            "type": "integer",
            "description": "* Einheit\r\n* Unit",
            "format": "int32",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "isoAlpha3": {
            "type": "string",
            "description": "* ISO alpha-3\r\n* ISO alpha-3",
            "nullable": true
          },
          "course": {
            "type": "number",
            "description": "* Kurs zu €\r\n* Course to €",
            "format": "double",
            "nullable": true
          },
          "number": {
            "type": "string",
            "description": "* Währungs-Nummer\r\n* Currency number",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Währung als gelöscht\r\n* Flags the currency as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Währung\r\n* Currency"
      },
      "DTO_Custom_Promotion_Redeemed": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "promotionNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sequentialPromotionNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "promotionName": {
            "type": "string",
            "nullable": true
          },
          "customerNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "customerName": {
            "type": "string",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "branchNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "branchName": {
            "type": "string",
            "nullable": true
          },
          "receiptNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "receiptPosition": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "value": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_Custom_Sale": {
        "type": "object",
        "properties": {
          "articleInformation": {
            "type": "string",
            "nullable": true
          },
          "articleNumber": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "articleLastOrderDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "articleText1": {
            "type": "string",
            "nullable": true
          },
          "articleText2": {
            "type": "string",
            "nullable": true
          },
          "articleText3": {
            "type": "string",
            "nullable": true
          },
          "branchNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "articleSize": {
            "type": "string",
            "nullable": true
          },
          "mainCategoryName": {
            "type": "string",
            "nullable": true
          },
          "mainCategoryNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "articleSizeNumber": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "ean": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "customerNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "currencyNumber": {
            "type": "string",
            "nullable": true
          },
          "countryNumber": {
            "type": "string",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "brandName": {
            "type": "string",
            "nullable": true
          },
          "brandNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "supplierNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "supplierName": {
            "type": "string",
            "nullable": true
          },
          "staffNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "receiptNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "purchasePrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "cashierNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "discount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "cashRegisterNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "deduction": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "nullable": true
          },
          "receiptPosition": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "staffDiscount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "priceChangeReasonNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "returnReasonNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/SaleType"
          },
          "salePrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "labelPrice": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "paymentOptionNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "time": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "categoryName": {
            "type": "string",
            "nullable": true
          },
          "categoryNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "taxNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "taxPercent": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "supplierArticleNumber": {
            "type": "string",
            "nullable": true
          },
          "branchName": {
            "type": "string",
            "nullable": true
          },
          "alternativeReceiptNumber": {
            "type": "string",
            "nullable": true
          },
          "colorNumber": {
            "type": "integer",
            "format": "int32"
          },
          "colorName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_Custom_Selection": {
        "type": "object",
        "properties": {
          "receiptNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "deduction": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "receiptPosition": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "discount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "value": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "branchNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "articleSizeNumber": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "customerNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "staffNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "categoryNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "categoryName": {
            "type": "string",
            "nullable": true
          },
          "supplierNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "supplierName": {
            "type": "string",
            "nullable": true
          },
          "articleSize": {
            "type": "string",
            "nullable": true
          },
          "articleInformation": {
            "type": "string",
            "nullable": true
          },
          "articleLastOrderDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "articleText1": {
            "type": "string",
            "nullable": true
          },
          "articleText2": {
            "type": "string",
            "nullable": true
          },
          "articleText3": {
            "type": "string",
            "nullable": true
          },
          "supplierArticleNumber": {
            "type": "string",
            "nullable": true
          },
          "brandNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "brandName": {
            "type": "string",
            "nullable": true
          },
          "taxNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "taxPercent": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "branchName": {
            "type": "string",
            "nullable": true
          },
          "currencyNumber": {
            "type": "string",
            "nullable": true
          },
          "countryNumber": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_Customer": {
        "type": "object",
        "properties": {
          "branchNumber": {
            "type": "integer",
            "description": "* Filiale-Nummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "* Titel des Kunden\r\n* Titel of the customer",
            "nullable": true
          },
          "isLockedForSelections": {
            "type": "boolean",
            "description": "* Kennzeichent das angibt ob der Kunde für Auswahlen gesperrt ist\r\n* Flag that defines the customer as locked for selections"
          },
          "bankCode": {
            "type": "integer",
            "description": "* Bankleitzahl\r\n* Bankcode",
            "format": "int32",
            "nullable": true
          },
          "signedDeclarationOfConsent": {
            "type": "boolean",
            "description": "* Kennzeichen das angibt ob der Kunde eine Einverständnisserklärung unterschrieben hat\r\n* Flag that defines that the customer signed a declaration of consent"
          },
          "email": {
            "type": "string",
            "description": "* E-Mail Adresse\r\n* E-Mail address",
            "nullable": true
          },
          "maritalStatus": {
            "$ref": "#/components/schemas/MaritalStatus"
          },
          "fax": {
            "type": "string",
            "description": "* Fax-Nummer\r\n* Fax number",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "* Geburtsdatum\r\n* Date of birth",
            "format": "date-time",
            "nullable": true
          },
          "dateOfBirthSignificantOther": {
            "type": "string",
            "description": "* Geburtsdatum des Partners\r\n* Date of birth from the significant other",
            "format": "date-time",
            "nullable": true
          },
          "isBusiness": {
            "type": "boolean",
            "description": "* Kennzeichen das angibt ob es sich um einen gewerblichen Kunden handelt\r\n* Flag that defines the customer as buisness"
          },
          "iban": {
            "type": "string",
            "description": "* IBAN\r\n* IBAN",
            "nullable": true
          },
          "info1": {
            "type": "string",
            "description": "* Informationen über den Kunden\r\n* Information about the customer",
            "nullable": true
          },
          "info2": {
            "type": "string",
            "description": "* Mehr Informationen über den Kunden\r\n* More information about the customer",
            "nullable": true
          },
          "bankAccount": {
            "type": "string",
            "description": "* Konto-Nummer\r\n* Bank account number",
            "nullable": true
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "isStaff": {
            "type": "boolean",
            "description": "* Kennzeichen das angibt ob es sich bei dem Kunden gleichzeitig um einen Mitarbeiter handelt\r\n* Flag that defines the customer as staff"
          },
          "mobilePhone": {
            "type": "string",
            "description": "* Primäre Handynmummer\r\n* Primary mobile phone number",
            "nullable": true
          },
          "subscriptionNewsletter": {
            "type": "boolean",
            "description": "* Kennzeichen das angibt ob der Kunde einen Newsletter empfangen möchte\r\n* Flag that defines that the customer wants to receive a newsletter"
          },
          "subscriptionNewsletterConfirmationDate": {
            "type": "string",
            "description": "* Datum das angibt, wann der Kunde dem Empfang eines Newsletters zugestimmt hat\r\n* Flag that defines when the customer consented to receive a newsletter",
            "format": "date-time",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "* Nachname\r\n* Last name",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "* Stadt\r\n* City",
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "description": "* Postleitzahl\r\n* ZIP code",
            "nullable": true
          },
          "isLocked": {
            "type": "boolean",
            "description": "* Kennzeichen das angibt ob der Kunde gesperrt ist\r\n* Flag that defines the customer as locked"
          },
          "street": {
            "type": "string",
            "description": "* Straße\r\n* Street",
            "nullable": true
          },
          "bic": {
            "type": "string",
            "description": "* BIC\r\n* BIC",
            "nullable": true
          },
          "telephone": {
            "type": "string",
            "description": "* Primäre Telefonnummer\r\n* Primary telephone number",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "* Vorname\r\n* First name",
            "nullable": true
          },
          "subscriptionAdvertising": {
            "type": "boolean",
            "description": "* Kennzeichen das angibt ob der Kunde Werbung erhalten möchte\r\n* Flag that defines that the customer wants to receive advertising"
          },
          "countryNumber": {
            "type": "string",
            "description": "* Land-Nummer\r\n* Country number",
            "nullable": true
          },
          "staffNumber": {
            "type": "integer",
            "description": "* Personal-Nummer\r\n* Staff number",
            "format": "int32",
            "nullable": true
          },
          "selectionCriteria1": {
            "type": "string",
            "description": "* Selektionsmerkmal 1\r\n* Selection criteria 1",
            "nullable": true
          },
          "selectionCriteria2": {
            "type": "string",
            "description": "* Selektionsmerkmal 2\r\n* Selection criteria 2",
            "nullable": true
          },
          "selectionCriteria3": {
            "type": "string",
            "description": "* Selektionsmerkmal 3\r\n* Selection criteria 3",
            "nullable": true
          },
          "selectionCriteria4": {
            "type": "string",
            "description": "* Selektionsmerkmal 4\r\n* Selection criteria 4",
            "nullable": true
          },
          "selectionCriteria5": {
            "type": "string",
            "description": "* Selektionsmerkmal 5\r\n* Selection criteria 5",
            "nullable": true
          },
          "selectionCriteria6": {
            "type": "string",
            "description": "* Selektionsmerkmal 6\r\n* Selection criteria 6",
            "nullable": true
          },
          "selectionCriteria7": {
            "type": "string",
            "description": "* Selektionsmerkmal 7\r\n* Selection criteria 7",
            "nullable": true
          },
          "selectionCriteria8": {
            "type": "string",
            "description": "* Selektionsmerkmal 8\r\n* Selection criteria 8",
            "nullable": true
          },
          "selectionCriteria9": {
            "type": "string",
            "description": "* Selektionsmerkmal 9\r\n* Selection criteria 9",
            "nullable": true
          },
          "vatNumber": {
            "type": "string",
            "description": "* Steuer-Nummer\r\n* VAT number",
            "nullable": true
          },
          "declarationsOfConsent": {
            "$ref": "#/components/schemas/DeclarationOfConsent"
          },
          "groupNumber": {
            "type": "integer",
            "description": "* Verweis auf die zugewiesene Kundengruppe\r\n* Reference to the assigned customer group",
            "format": "int32"
          },
          "customerCard": {
            "type": "integer",
            "description": "* Kdkarte\r\n* customerCard",
            "format": "int32",
            "nullable": true
          },
          "webshopUser": {
            "type": "string",
            "description": "* Webshop Benutzer\r\n* Webshop user",
            "nullable": true
          },
          "webshopUserPassword": {
            "type": "string",
            "description": "* Webshop Benutzer Passwort\r\n* Webshop user password",
            "nullable": true
          },
          "customerType": {
            "type": "string",
            "description": "* Kundentyp\r\n* Customer type",
            "nullable": true
          },
          "poBox": {
            "type": "string",
            "description": "* Postfach\r\n* PO-Box",
            "nullable": true
          },
          "poBoxZipCode": {
            "type": "string",
            "description": "* Postfach PLZ\r\n* PO-Box Zip code",
            "nullable": true
          },
          "telephoneSecondary": {
            "type": "string",
            "description": "* Sekundäre Telefonnummer\r\n* Secondary telephone number",
            "nullable": true
          },
          "mobilePhoneSecondary": {
            "type": "string",
            "description": "* Sekundäre Handynmummer\r\n* Secondary mobile phone number",
            "nullable": true
          },
          "discountGroup": {
            "type": "integer",
            "description": "* Rabattgruppe\r\n* Discount group",
            "format": "int32"
          },
          "discountPercent": {
            "type": "number",
            "description": "* Rabatt %\r\n* Discount %",
            "format": "double"
          },
          "bonusPercent": {
            "type": "number",
            "description": "* Bonus %\r\n* Bonus %",
            "format": "double"
          },
          "familyNumber": {
            "type": "integer",
            "description": "* Familien-Nummer\r\n* Family number",
            "format": "int32",
            "nullable": true
          },
          "bonusType": {
            "$ref": "#/components/schemas/BonusTypes"
          },
          "hasCustomerCard": {
            "type": "boolean",
            "description": "* Kennzeichen, ob Kundenkarte vorhanden ist\r\n* Flag that defines whether the customer has a customer card"
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "creationDate": {
            "type": "string",
            "description": "* Datum der Anlage des Kunden\r\n* Date the customer was created",
            "format": "date-time",
            "nullable": true
          },
          "searchTerm": {
            "type": "string",
            "description": "* Suchwort des Kunden\r\n* Searchterm of the customer",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "* Kunde-Nummer\r\n* Customer number",
            "format": "int32",
            "nullable": true
          },
          "personalSalutation": {
            "type": "string",
            "description": "* Persönliche Anrede\r\n* Personal salutation",
            "nullable": true
          },
          "name1": {
            "type": "string",
            "description": "* Name 1\r\n* Name 1",
            "nullable": true
          },
          "name2": {
            "type": "string",
            "description": "* Name 2\r\n* Name 2",
            "nullable": true
          },
          "name3": {
            "type": "string",
            "description": "* Name 3\r\n* Name 3",
            "nullable": true
          },
          "salutation": {
            "type": "string",
            "description": "* Anrede\r\n* Salutation",
            "nullable": true
          },
          "revenue": {
            "type": "number",
            "description": "* Umsatz des Kunden\r\n* Revenue of the customer",
            "format": "double",
            "nullable": true
          },
          "bonusValue": {
            "type": "number",
            "description": "* Bonuswert des Kunden\r\n* Bonus value of the customer",
            "format": "double",
            "nullable": true
          },
          "loyalityPoints": {
            "type": "integer",
            "description": "* Bonuspunkte\r\n* Loyality points",
            "format": "int32"
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet den Kunden als gelöscht\r\n* Flags the customer as deleted"
          },
          "mergedInto": {
            "type": "string",
            "description": "* Beinhaltet, falls zutreffend, die GUID des Kunden in den dieser Datensatz überführt wurde\r\n* If applicable, this contains the GUID of the customer this deleted customer was merged into",
            "format": "uuid",
            "nullable": true
          },
          "customerCardPrintDate": {
            "type": "string",
            "description": "* Datum des Kundekartendrucks\r\n* Date of the customer card printout",
            "format": "date-time",
            "nullable": true
          },
          "inactiveFlag": {
            "type": "boolean",
            "description": "* Kennzeichen, dass den Inaktivitätsstatus des Kunden wiedergibt (1 = falsche Adresse, 2 = ohne Umsatz)\r\n* Flag that defines whether the customer is in an inactivity state (1 = wrong address, 2 = without sales)"
          },
          "lastBonusSettlementDate": {
            "type": "string",
            "description": "* Datum der letzten Bonusabrechnung\r\n* Date of the last bonus settlement",
            "format": "date-time",
            "nullable": true
          },
          "directDebitAuthorization": {
            "type": "boolean",
            "description": "* Kennzeichen, ob eine Einzugsermächtigung erteilt wurde\r\n* Flag that defines whether the customer has given a direct debit authorization"
          }
        },
        "additionalProperties": false,
        "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change"
      },
      "DTO_CustomerCard": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "* Name der Kundenkarte\r\n* Name of the customer card",
            "nullable": true
          },
          "number": {
            "type": "string",
            "description": "* Kundenkarte-Nummer\r\n* Customer card number",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "description": "* Kennzeichnet die Kundenkarte als aktiv\r\n* Flags the customer card as active",
            "nullable": true
          },
          "customerNumber": {
            "type": "integer",
            "description": "* Kunde-Nummer\r\n* Customer number",
            "format": "int32",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Kundenkarte als gelöscht\r\n* Flags the customer card as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Kundenkarten\r\n* Customer cards"
      },
      "DTO_CustomerOrder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique Identifier",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichen das angibt ob der Auftrag gelöscht wurde\r\n* Flag that defines the order as deleted"
          },
          "status": {
            "$ref": "#/components/schemas/CustomerOrderStatus"
          },
          "orderNumber": {
            "type": "string",
            "description": "* Auftrags-Nummer\r\n* Order number",
            "nullable": true
          },
          "customerNumber": {
            "type": "integer",
            "description": "* Kunde-Nummer\r\n* Customer number",
            "format": "int32",
            "nullable": true
          },
          "billingAddress": {
            "$ref": "#/components/schemas/DTO_CustomerOrderAddress"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/DTO_CustomerOrderAddress"
          },
          "email": {
            "type": "string",
            "description": "* E-Mail Adresse\r\n* E-Mail address",
            "nullable": true
          },
          "shipmentOptionNumber": {
            "type": "integer",
            "description": "* Versandart-Nummer\r\n* Shipment option number",
            "format": "int32"
          },
          "paymentOptionNumber": {
            "type": "integer",
            "description": "* Zahlungsbedingung-Nummer\r\n* Payment option number",
            "format": "int32"
          },
          "pickUpBranch": {
            "type": "string",
            "description": "* Eindeutige ID der Abholfiliale\r\n* Unique identifier of the pickup branch",
            "format": "uuid",
            "nullable": true
          },
          "paymentId": {
            "type": "string",
            "description": "* Payment ID (z.B. Klarna OrderId oder PayPal PaymentId)\r\n* Payment ID (e.g. Klarna OrderId or PayPal PaymentId)",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Auftrag\r\n* Order"
      },
      "DTO_CustomerOrderAddress": {
        "type": "object",
        "properties": {
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "fullName": {
            "type": "string",
            "description": "* Name des Kunden\r\n* Name of the Customer",
            "nullable": true
          },
          "businessName": {
            "type": "string",
            "description": "* Firmenname\r\n* Buisness name",
            "nullable": true
          },
          "street": {
            "type": "string",
            "description": "* Straße\r\n* Street",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "* Stadt\r\n* City",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "* Postleitzahl\r\n* ZIP code",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "* ISO aplha-2 des Landes\r\n* ISO alpha-2 of the country",
            "nullable": true
          },
          "addressAddition": {
            "type": "string",
            "description": "* Adresszusatz\r\n* Additional address information",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Auftrags Adresse\r\n* Order address"
      },
      "DTO_CustomerOrderCollection": {
        "type": "object",
        "properties": {
          "orders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_CustomerOrder"
            },
            "description": "* Liste von Aufträgen\r\n* List of orders",
            "nullable": true
          },
          "orderPositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_CustomerOrderPosition"
            },
            "description": "* Liste von Auftragspositionen\r\n* List of order positions",
            "nullable": true
          },
          "orderShipments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_CustomerOrderShipment"
            },
            "description": "* Liste von Sendungen für Aufträge\r\n* List of shipments for orders",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Enthält alle Auftrags relevanten Informationen\r\n* Contains order relevant information"
      },
      "DTO_CustomerOrderDeliveryAddress": {
        "type": "object",
        "properties": {
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "fullName": {
            "type": "string",
            "description": "* Name des Kunden\r\n* Name of the Customer",
            "nullable": true
          },
          "businessName": {
            "type": "string",
            "description": "* Firmenname\r\n* Buisness name",
            "nullable": true
          },
          "street": {
            "type": "string",
            "description": "* Straße\r\n* Street",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "* Stadt\r\n* City",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "* Postleitzahl\r\n* ZIP code",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "* ISO aplha-2 des Landes\r\n* ISO alpha-2 of the country",
            "nullable": true
          },
          "addressAddition": {
            "type": "string",
            "description": "* Adresszusatz\r\n* Additional address information",
            "nullable": true
          },
          "postNumber": {
            "type": "string",
            "description": "* Post Nummer des Kunden beim Versand an eine Packstation\r\n* Post number of the customer when delivering to a Packstation",
            "nullable": true
          },
          "packstationNumber": {
            "type": "string",
            "description": "* Packstation-Nummer\r\n* Packstation number",
            "nullable": true
          },
          "servicePointNumber": {
            "type": "string",
            "description": "* Postfiliale-Nummer\r\n* Service point number",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Auftrags Adresse\r\n* Order address"
      },
      "DTO_CustomerOrderDiscount": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "* Name des Rabatts\r\n* Name of the discount",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "* Wert\r\n* Value",
            "format": "double"
          },
          "voucherId": {
            "type": "string",
            "description": "* Referenz auf den eingelösten Rabattgutschein\r\n* Reference to the redeemed voucher",
            "format": "uuid",
            "nullable": true
          },
          "appliedToPositions": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "* Sammlung Artikel-Größen IDs aus den Positionen, die diesen Rabatt erhalten\r\n* List article size ids from the positions that receive this discount",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Rabatte\r\n* Discounts"
      },
      "DTO_CustomerOrderPosition": {
        "type": "object",
        "properties": {
          "articleSizeId": {
            "type": "string",
            "description": "* Eindeutige ID der Artikel-Größe\r\n* Unique identifier of thearticle size",
            "format": "uuid",
            "nullable": true
          },
          "customName": {
            "type": "string",
            "description": "* Individueller Name des Artikel wenn die ArticleSizeId nicht bekannt ist\r\n* Custom name of the article if the ArticleSizeId is unknown",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "* Verkaufspreis\r\n* Sale price",
            "format": "double"
          },
          "comment": {
            "type": "string",
            "description": "* Kommentar\r\n* Comment",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "* Menge\r\n* Amount",
            "format": "double"
          },
          "prefferedStockBranch": {
            "type": "integer",
            "description": "* Bevorzugte Lagerfiliale (überschreibt normale Filial-Reihenfolge)\r\n* Preferred stock branch (overrides usual order of stock branches)",
            "format": "int32",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/CustomerOrderStatus"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichen das angibt ob die Position gelöscht wurde\r\n* Flag that defines the position as deleted"
          },
          "orderId": {
            "type": "string",
            "description": "* Eindeutige ID des Auftrags\r\n* Unique identifier of the order",
            "format": "uuid"
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "index": {
            "type": "integer",
            "description": "* Positions-Nummer (in 10er Schritten, Positionen 1000+ sind Versand- oder Rabatt-Positionen)\r\n* Position number (in increments of 10, position 1000+ are shipment or discount positions)",
            "format": "int32"
          },
          "isShipmentCost": {
            "type": "boolean",
            "description": "* Kennzeichen das angibt ob die Position eine Versand-Position ist\r\n* Flag that defines the position as shipment position"
          },
          "isDiscount": {
            "type": "boolean",
            "description": "* Kennzeichen das angibt ob die Position eine Rabatt-Position ist\r\n* Flag that defines the shipment as discount position"
          },
          "lastChange": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Orderposition\r\n* Order position"
      },
      "DTO_CustomerOrderPosition_Create": {
        "type": "object",
        "properties": {
          "articleSizeId": {
            "type": "string",
            "description": "* Eindeutige ID der Artikel-Größe\r\n* Unique identifier of thearticle size",
            "format": "uuid",
            "nullable": true
          },
          "customName": {
            "type": "string",
            "description": "* Individueller Name des Artikel wenn die ArticleSizeId nicht bekannt ist\r\n* Custom name of the article if the ArticleSizeId is unknown",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "* Verkaufspreis\r\n* Sale price",
            "format": "double"
          },
          "comment": {
            "type": "string",
            "description": "* Kommentar\r\n* Comment",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "* Menge\r\n* Amount",
            "format": "double"
          },
          "prefferedStockBranch": {
            "type": "integer",
            "description": "* Bevorzugte Lagerfiliale (überschreibt normale Filial-Reihenfolge)\r\n* Preferred stock branch (overrides usual order of stock branches)",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Anlage einer Auftragsposition\r\n* Creat of order position"
      },
      "DTO_CustomerOrderShipment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "orderId": {
            "type": "string",
            "description": "* Eindeutige ID des Auftrags\r\n* Unique identifier of the order",
            "format": "uuid"
          },
          "shipmentProvider": {
            "type": "string",
            "description": "* Name des Versanddienstleisters\r\n* Name of the shipment provider",
            "nullable": true
          },
          "shipmentDate": {
            "type": "string",
            "description": "* Datum\r\n* Date",
            "format": "date-time",
            "nullable": true
          },
          "trackingNumber": {
            "type": "string",
            "description": "* Tracking-Nummer\r\n* Tracking number",
            "nullable": true
          },
          "isReturnLabel": {
            "type": "boolean",
            "description": "* Kennzeichen das angibt ob es sich um eine retoure handelt\r\n* Flag that defines the shipment as a return"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichen das angibt ob die Sendung gelöscht wurde\r\n* Flag that defines the shipment as deleted"
          },
          "lastChange": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Sendung\r\n* Shipment"
      },
      "DTO_CustomerOrder_Create": {
        "type": "object",
        "properties": {
          "orderNumber": {
            "type": "string",
            "description": "* Auftrag-Nummer\r\n* Order number",
            "nullable": true
          },
          "customerId": {
            "type": "string",
            "description": "* Eindeutige ID des Kunden\r\n* Unique identifier of the customer",
            "format": "uuid",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "* Vorname des Kunden (Füllen wenn CustomerId Feld null ist)\r\n* Firstname of the Customer (Fill if the CustomerId field is null)",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "* Nachname des Kunden (Füllen wenn CustomerId Feld null ist)\r\n* Lastname of the Customer (Fill if the CustomerId field is null)",
            "nullable": true
          },
          "billingAddress": {
            "$ref": "#/components/schemas/DTO_CustomerOrderAddress"
          },
          "deliveryAddress": {
            "$ref": "#/components/schemas/DTO_CustomerOrderDeliveryAddress"
          },
          "email": {
            "type": "string",
            "description": "* E-Mail Adresse\r\n* E-Mail address",
            "nullable": true
          },
          "telephone": {
            "type": "string",
            "description": "* Telefon-Nummer\r\n* Telephone number",
            "nullable": true
          },
          "shipmentOptionNumber": {
            "type": "integer",
            "description": "* Versandart-Nummer\r\n* Shipment option number",
            "format": "int32"
          },
          "paymentOptionNumber": {
            "type": "integer",
            "description": "* Zahlungsart-Nummer\r\n* Payment option number",
            "format": "int32"
          },
          "pickUpBranch": {
            "type": "string",
            "description": "* Eindeutige ID der Abholfiliale\r\n* Unique identifier of the pickup branch",
            "format": "uuid",
            "nullable": true
          },
          "bookingBranch": {
            "type": "string",
            "description": "* Eindeutige ID der Buchungsfiliale\r\n* Unique identifier of the booking branch",
            "format": "uuid",
            "nullable": true
          },
          "shipmentCost": {
            "type": "number",
            "description": "* Versandkosten\r\n* Shipment costs",
            "format": "double"
          },
          "paymentId": {
            "type": "string",
            "description": "* Payment ID (z.B. Klarna OrderId oder PayPal PaymentId)\r\n* Payment ID (e.g. Klarna OrderId or PayPal PaymentId)",
            "nullable": true
          },
          "orderPositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_CustomerOrderPosition_Create"
            },
            "description": "* Liste von Auftragspositionen\r\n* List of Order positions",
            "nullable": true
          },
          "orderDiscounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_CustomerOrderDiscount"
            },
            "description": "* Liste von Rabatten auf den Auftrag\r\n* List of discount on the order",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Anlage eines Auftrags\r\n* Create of order"
      },
      "DTO_Customer_Create": {
        "type": "object",
        "properties": {
          "branchNumber": {
            "type": "integer",
            "description": "* Filiale-Nummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "* Titel des Kunden\r\n* Titel of the customer",
            "nullable": true
          },
          "isLockedForSelections": {
            "type": "boolean",
            "description": "* Kennzeichent das angibt ob der Kunde für Auswahlen gesperrt ist\r\n* Flag that defines the customer as locked for selections"
          },
          "bankCode": {
            "type": "integer",
            "description": "* Bankleitzahl\r\n* Bankcode",
            "format": "int32",
            "nullable": true
          },
          "signedDeclarationOfConsent": {
            "type": "boolean",
            "description": "* Kennzeichen das angibt ob der Kunde eine Einverständnisserklärung unterschrieben hat\r\n* Flag that defines that the customer signed a declaration of consent"
          },
          "email": {
            "type": "string",
            "description": "* E-Mail Adresse\r\n* E-Mail address",
            "nullable": true
          },
          "maritalStatus": {
            "$ref": "#/components/schemas/MaritalStatus"
          },
          "fax": {
            "type": "string",
            "description": "* Fax-Nummer\r\n* Fax number",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "* Geburtsdatum\r\n* Date of birth",
            "format": "date-time",
            "nullable": true
          },
          "dateOfBirthSignificantOther": {
            "type": "string",
            "description": "* Geburtsdatum des Partners\r\n* Date of birth from the significant other",
            "format": "date-time",
            "nullable": true
          },
          "isBusiness": {
            "type": "boolean",
            "description": "* Kennzeichen das angibt ob es sich um einen gewerblichen Kunden handelt\r\n* Flag that defines the customer as buisness"
          },
          "iban": {
            "type": "string",
            "description": "* IBAN\r\n* IBAN",
            "nullable": true
          },
          "info1": {
            "type": "string",
            "description": "* Informationen über den Kunden\r\n* Information about the customer",
            "nullable": true
          },
          "info2": {
            "type": "string",
            "description": "* Mehr Informationen über den Kunden\r\n* More information about the customer",
            "nullable": true
          },
          "bankAccount": {
            "type": "string",
            "description": "* Konto-Nummer\r\n* Bank account number",
            "nullable": true
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "isStaff": {
            "type": "boolean",
            "description": "* Kennzeichen das angibt ob es sich bei dem Kunden gleichzeitig um einen Mitarbeiter handelt\r\n* Flag that defines the customer as staff"
          },
          "mobilePhone": {
            "type": "string",
            "description": "* Primäre Handynmummer\r\n* Primary mobile phone number",
            "nullable": true
          },
          "subscriptionNewsletter": {
            "type": "boolean",
            "description": "* Kennzeichen das angibt ob der Kunde einen Newsletter empfangen möchte\r\n* Flag that defines that the customer wants to receive a newsletter"
          },
          "subscriptionNewsletterConfirmationDate": {
            "type": "string",
            "description": "* Datum das angibt, wann der Kunde dem Empfang eines Newsletters zugestimmt hat\r\n* Flag that defines when the customer consented to receive a newsletter",
            "format": "date-time",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "* Nachname\r\n* Last name",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "* Stadt\r\n* City",
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "description": "* Postleitzahl\r\n* ZIP code",
            "nullable": true
          },
          "isLocked": {
            "type": "boolean",
            "description": "* Kennzeichen das angibt ob der Kunde gesperrt ist\r\n* Flag that defines the customer as locked"
          },
          "street": {
            "type": "string",
            "description": "* Straße\r\n* Street",
            "nullable": true
          },
          "bic": {
            "type": "string",
            "description": "* BIC\r\n* BIC",
            "nullable": true
          },
          "telephone": {
            "type": "string",
            "description": "* Primäre Telefonnummer\r\n* Primary telephone number",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "* Vorname\r\n* First name",
            "nullable": true
          },
          "subscriptionAdvertising": {
            "type": "boolean",
            "description": "* Kennzeichen das angibt ob der Kunde Werbung erhalten möchte\r\n* Flag that defines that the customer wants to receive advertising"
          },
          "countryNumber": {
            "type": "string",
            "description": "* Land-Nummer\r\n* Country number",
            "nullable": true
          },
          "staffNumber": {
            "type": "integer",
            "description": "* Personal-Nummer\r\n* Staff number",
            "format": "int32",
            "nullable": true
          },
          "selectionCriteria1": {
            "type": "string",
            "description": "* Selektionsmerkmal 1\r\n* Selection criteria 1",
            "nullable": true
          },
          "selectionCriteria2": {
            "type": "string",
            "description": "* Selektionsmerkmal 2\r\n* Selection criteria 2",
            "nullable": true
          },
          "selectionCriteria3": {
            "type": "string",
            "description": "* Selektionsmerkmal 3\r\n* Selection criteria 3",
            "nullable": true
          },
          "selectionCriteria4": {
            "type": "string",
            "description": "* Selektionsmerkmal 4\r\n* Selection criteria 4",
            "nullable": true
          },
          "selectionCriteria5": {
            "type": "string",
            "description": "* Selektionsmerkmal 5\r\n* Selection criteria 5",
            "nullable": true
          },
          "selectionCriteria6": {
            "type": "string",
            "description": "* Selektionsmerkmal 6\r\n* Selection criteria 6",
            "nullable": true
          },
          "selectionCriteria7": {
            "type": "string",
            "description": "* Selektionsmerkmal 7\r\n* Selection criteria 7",
            "nullable": true
          },
          "selectionCriteria8": {
            "type": "string",
            "description": "* Selektionsmerkmal 8\r\n* Selection criteria 8",
            "nullable": true
          },
          "selectionCriteria9": {
            "type": "string",
            "description": "* Selektionsmerkmal 9\r\n* Selection criteria 9",
            "nullable": true
          },
          "vatNumber": {
            "type": "string",
            "description": "* Steuer-Nummer\r\n* VAT number",
            "nullable": true
          },
          "declarationsOfConsent": {
            "$ref": "#/components/schemas/DeclarationOfConsent"
          },
          "groupNumber": {
            "type": "integer",
            "description": "* Verweis auf die zugewiesene Kundengruppe\r\n* Reference to the assigned customer group",
            "format": "int32"
          },
          "customerCard": {
            "type": "integer",
            "description": "* Kdkarte\r\n* customerCard",
            "format": "int32",
            "nullable": true
          },
          "webshopUser": {
            "type": "string",
            "description": "* Webshop Benutzer\r\n* Webshop user",
            "nullable": true
          },
          "webshopUserPassword": {
            "type": "string",
            "description": "* Webshop Benutzer Passwort\r\n* Webshop user password",
            "nullable": true
          },
          "customerType": {
            "type": "string",
            "description": "* Kundentyp\r\n* Customer type",
            "nullable": true
          },
          "poBox": {
            "type": "string",
            "description": "* Postfach\r\n* PO-Box",
            "nullable": true
          },
          "poBoxZipCode": {
            "type": "string",
            "description": "* Postfach PLZ\r\n* PO-Box Zip code",
            "nullable": true
          },
          "telephoneSecondary": {
            "type": "string",
            "description": "* Sekundäre Telefonnummer\r\n* Secondary telephone number",
            "nullable": true
          },
          "mobilePhoneSecondary": {
            "type": "string",
            "description": "* Sekundäre Handynmummer\r\n* Secondary mobile phone number",
            "nullable": true
          },
          "discountGroup": {
            "type": "integer",
            "description": "* Rabattgruppe\r\n* Discount group",
            "format": "int32"
          },
          "discountPercent": {
            "type": "number",
            "description": "* Rabatt %\r\n* Discount %",
            "format": "double"
          },
          "bonusPercent": {
            "type": "number",
            "description": "* Bonus %\r\n* Bonus %",
            "format": "double"
          },
          "familyNumber": {
            "type": "integer",
            "description": "* Familien-Nummer\r\n* Family number",
            "format": "int32",
            "nullable": true
          },
          "bonusType": {
            "$ref": "#/components/schemas/BonusTypes"
          },
          "hasCustomerCard": {
            "type": "boolean",
            "description": "* Kennzeichen, ob Kundenkarte vorhanden ist\r\n* Flag that defines whether the customer has a customer card"
          }
        },
        "additionalProperties": false
      },
      "DTO_Customer_Update": {
        "type": "object",
        "properties": {
          "branchNumber": {
            "type": "integer",
            "description": "* Filiale-Nummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "* Titel des Kunden\r\n* Titel of the customer",
            "nullable": true
          },
          "isLockedForSelections": {
            "type": "boolean",
            "description": "* Kennzeichent das angibt ob der Kunde für Auswahlen gesperrt ist\r\n* Flag that defines the customer as locked for selections"
          },
          "bankCode": {
            "type": "integer",
            "description": "* Bankleitzahl\r\n* Bankcode",
            "format": "int32",
            "nullable": true
          },
          "signedDeclarationOfConsent": {
            "type": "boolean",
            "description": "* Kennzeichen das angibt ob der Kunde eine Einverständnisserklärung unterschrieben hat\r\n* Flag that defines that the customer signed a declaration of consent"
          },
          "email": {
            "type": "string",
            "description": "* E-Mail Adresse\r\n* E-Mail address",
            "nullable": true
          },
          "maritalStatus": {
            "$ref": "#/components/schemas/MaritalStatus"
          },
          "fax": {
            "type": "string",
            "description": "* Fax-Nummer\r\n* Fax number",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "* Geburtsdatum\r\n* Date of birth",
            "format": "date-time",
            "nullable": true
          },
          "dateOfBirthSignificantOther": {
            "type": "string",
            "description": "* Geburtsdatum des Partners\r\n* Date of birth from the significant other",
            "format": "date-time",
            "nullable": true
          },
          "isBusiness": {
            "type": "boolean",
            "description": "* Kennzeichen das angibt ob es sich um einen gewerblichen Kunden handelt\r\n* Flag that defines the customer as buisness"
          },
          "iban": {
            "type": "string",
            "description": "* IBAN\r\n* IBAN",
            "nullable": true
          },
          "info1": {
            "type": "string",
            "description": "* Informationen über den Kunden\r\n* Information about the customer",
            "nullable": true
          },
          "info2": {
            "type": "string",
            "description": "* Mehr Informationen über den Kunden\r\n* More information about the customer",
            "nullable": true
          },
          "bankAccount": {
            "type": "string",
            "description": "* Konto-Nummer\r\n* Bank account number",
            "nullable": true
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "isStaff": {
            "type": "boolean",
            "description": "* Kennzeichen das angibt ob es sich bei dem Kunden gleichzeitig um einen Mitarbeiter handelt\r\n* Flag that defines the customer as staff"
          },
          "mobilePhone": {
            "type": "string",
            "description": "* Primäre Handynmummer\r\n* Primary mobile phone number",
            "nullable": true
          },
          "subscriptionNewsletter": {
            "type": "boolean",
            "description": "* Kennzeichen das angibt ob der Kunde einen Newsletter empfangen möchte\r\n* Flag that defines that the customer wants to receive a newsletter"
          },
          "subscriptionNewsletterConfirmationDate": {
            "type": "string",
            "description": "* Datum das angibt, wann der Kunde dem Empfang eines Newsletters zugestimmt hat\r\n* Flag that defines when the customer consented to receive a newsletter",
            "format": "date-time",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "* Nachname\r\n* Last name",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "* Stadt\r\n* City",
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "description": "* Postleitzahl\r\n* ZIP code",
            "nullable": true
          },
          "isLocked": {
            "type": "boolean",
            "description": "* Kennzeichen das angibt ob der Kunde gesperrt ist\r\n* Flag that defines the customer as locked"
          },
          "street": {
            "type": "string",
            "description": "* Straße\r\n* Street",
            "nullable": true
          },
          "bic": {
            "type": "string",
            "description": "* BIC\r\n* BIC",
            "nullable": true
          },
          "telephone": {
            "type": "string",
            "description": "* Primäre Telefonnummer\r\n* Primary telephone number",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "* Vorname\r\n* First name",
            "nullable": true
          },
          "subscriptionAdvertising": {
            "type": "boolean",
            "description": "* Kennzeichen das angibt ob der Kunde Werbung erhalten möchte\r\n* Flag that defines that the customer wants to receive advertising"
          },
          "countryNumber": {
            "type": "string",
            "description": "* Land-Nummer\r\n* Country number",
            "nullable": true
          },
          "staffNumber": {
            "type": "integer",
            "description": "* Personal-Nummer\r\n* Staff number",
            "format": "int32",
            "nullable": true
          },
          "selectionCriteria1": {
            "type": "string",
            "description": "* Selektionsmerkmal 1\r\n* Selection criteria 1",
            "nullable": true
          },
          "selectionCriteria2": {
            "type": "string",
            "description": "* Selektionsmerkmal 2\r\n* Selection criteria 2",
            "nullable": true
          },
          "selectionCriteria3": {
            "type": "string",
            "description": "* Selektionsmerkmal 3\r\n* Selection criteria 3",
            "nullable": true
          },
          "selectionCriteria4": {
            "type": "string",
            "description": "* Selektionsmerkmal 4\r\n* Selection criteria 4",
            "nullable": true
          },
          "selectionCriteria5": {
            "type": "string",
            "description": "* Selektionsmerkmal 5\r\n* Selection criteria 5",
            "nullable": true
          },
          "selectionCriteria6": {
            "type": "string",
            "description": "* Selektionsmerkmal 6\r\n* Selection criteria 6",
            "nullable": true
          },
          "selectionCriteria7": {
            "type": "string",
            "description": "* Selektionsmerkmal 7\r\n* Selection criteria 7",
            "nullable": true
          },
          "selectionCriteria8": {
            "type": "string",
            "description": "* Selektionsmerkmal 8\r\n* Selection criteria 8",
            "nullable": true
          },
          "selectionCriteria9": {
            "type": "string",
            "description": "* Selektionsmerkmal 9\r\n* Selection criteria 9",
            "nullable": true
          },
          "vatNumber": {
            "type": "string",
            "description": "* Steuer-Nummer\r\n* VAT number",
            "nullable": true
          },
          "declarationsOfConsent": {
            "$ref": "#/components/schemas/DeclarationOfConsent"
          },
          "groupNumber": {
            "type": "integer",
            "description": "* Verweis auf die zugewiesene Kundengruppe\r\n* Reference to the assigned customer group",
            "format": "int32"
          },
          "customerCard": {
            "type": "integer",
            "description": "* Kdkarte\r\n* customerCard",
            "format": "int32",
            "nullable": true
          },
          "webshopUser": {
            "type": "string",
            "description": "* Webshop Benutzer\r\n* Webshop user",
            "nullable": true
          },
          "webshopUserPassword": {
            "type": "string",
            "description": "* Webshop Benutzer Passwort\r\n* Webshop user password",
            "nullable": true
          },
          "customerType": {
            "type": "string",
            "description": "* Kundentyp\r\n* Customer type",
            "nullable": true
          },
          "poBox": {
            "type": "string",
            "description": "* Postfach\r\n* PO-Box",
            "nullable": true
          },
          "poBoxZipCode": {
            "type": "string",
            "description": "* Postfach PLZ\r\n* PO-Box Zip code",
            "nullable": true
          },
          "telephoneSecondary": {
            "type": "string",
            "description": "* Sekundäre Telefonnummer\r\n* Secondary telephone number",
            "nullable": true
          },
          "mobilePhoneSecondary": {
            "type": "string",
            "description": "* Sekundäre Handynmummer\r\n* Secondary mobile phone number",
            "nullable": true
          },
          "discountGroup": {
            "type": "integer",
            "description": "* Rabattgruppe\r\n* Discount group",
            "format": "int32"
          },
          "discountPercent": {
            "type": "number",
            "description": "* Rabatt %\r\n* Discount %",
            "format": "double"
          },
          "bonusPercent": {
            "type": "number",
            "description": "* Bonus %\r\n* Bonus %",
            "format": "double"
          },
          "familyNumber": {
            "type": "integer",
            "description": "* Familien-Nummer\r\n* Family number",
            "format": "int32",
            "nullable": true
          },
          "bonusType": {
            "$ref": "#/components/schemas/BonusTypes"
          },
          "hasCustomerCard": {
            "type": "boolean",
            "description": "* Kennzeichen, ob Kundenkarte vorhanden ist\r\n* Flag that defines whether the customer has a customer card"
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "DTO_Department": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "* Name der Abteilung\r\n* Name of the department",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "searchTerm": {
            "type": "string",
            "description": "* Suchwort für die Abteilung\r\n* Searchterm for the department",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "* Abeilung-Nummer\r\n* Department number",
            "format": "int32",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Abteilung als gelöscht\r\n* Flags the department as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Abteilung\r\n* Department"
      },
      "DTO_Deposit": {
        "type": "object",
        "properties": {
          "branchNumber": {
            "type": "integer",
            "description": "* Filial-Nummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "receiptNumber": {
            "type": "integer",
            "description": "* Bon-Nummer\r\n* Receipt number",
            "format": "int32",
            "nullable": true
          },
          "receiptPosition": {
            "type": "integer",
            "description": "* Position auf dem Bon\r\n* Position on the receipt",
            "format": "int32",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "* Datum\r\n* Date",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "number": {
            "type": "integer",
            "description": "* Anzahlung-Nummer\r\n* Deposit number",
            "format": "int32",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "description": "* Status (0 = offen, 1 = erledigt)\r\n* Status (0 = offen, 1 = cleared)",
            "format": "int32",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "* Wert\r\n* Value",
            "format": "double",
            "nullable": true
          },
          "customerNumber": {
            "type": "integer",
            "description": "* Kunde-Nummer\r\n* Customer number",
            "format": "int32",
            "nullable": true
          },
          "currencyNumber": {
            "type": "string",
            "description": "* Währung-Nummer\r\n* Currency number",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Anzahlung als gelöscht\r\n* Flags the deposit as deleted"
          },
          "amountRedeemed": {
            "type": "number",
            "description": "* Eingelöster Wert\r\n* Amount redeemed",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Anzahlung\r\n* Deposit"
      },
      "DTO_Deposit_Redeemed": {
        "type": "object",
        "properties": {
          "branchNumber": {
            "type": "integer",
            "description": "* Filial-Nummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "receiptNumber": {
            "type": "integer",
            "description": "* Bon-Nummer\r\n* Receipt number",
            "format": "int32",
            "nullable": true
          },
          "receiptPosition": {
            "type": "integer",
            "description": "* Position auf dem Bon\r\n* Position on the receipt",
            "format": "int32",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "* Datum\r\n* Date",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "number": {
            "type": "integer",
            "description": "* Anzahlung-Nummer\r\n* Deposit number",
            "format": "int32",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "description": "* Status (0 = offen, 1 = erledigt)\r\n* Status (0 = offen, 1 = cleared)",
            "format": "int32",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "* Wert\r\n* Value",
            "format": "double",
            "nullable": true
          },
          "customerNumber": {
            "type": "integer",
            "description": "* Kunde-Nummer\r\n* Customer number",
            "format": "int32",
            "nullable": true
          },
          "currencyNumber": {
            "type": "string",
            "description": "* Währung-Nummer\r\n* Currency number",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Anzahlung als gelöscht\r\n* Flags the deposit as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Einlösung einer Anzahlung\r\n* Redemption of a deposit"
      },
      "DTO_DirectDebit": {
        "type": "object",
        "properties": {
          "customerNumber": {
            "type": "integer",
            "description": "* Kundennummer\r\n* Customer number",
            "format": "int32",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "* Erstellungsdatum\r\n* Date of creation",
            "format": "date-time",
            "nullable": true
          },
          "receiptNumber": {
            "type": "integer",
            "description": "* Bonnummer\r\n* Receipt number",
            "format": "int32",
            "nullable": true
          },
          "branchNumber": {
            "type": "integer",
            "description": "* Filialnummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "* Betrag\r\n* Amount",
            "format": "double",
            "nullable": true
          },
          "bankCode": {
            "type": "string",
            "description": "* Bankleitzahl\r\n* Bank code number",
            "nullable": true
          },
          "bankAccountNumber": {
            "type": "string",
            "description": "* Kontonummer\r\n* Bank account number",
            "nullable": true
          },
          "outputNumber": {
            "type": "integer",
            "description": "* Belegausgabenummer\r\n* Output number",
            "format": "int32",
            "nullable": true
          },
          "isPending": {
            "type": "boolean",
            "description": "* Ausstehend\r\n* Pending"
          }
        },
        "additionalProperties": false,
        "description": "* Lastschriften\r\n* Direct debit"
      },
      "DTO_DispatchAdvice": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "* Lieferschein-Nummer\r\n* Despatch advice number",
            "nullable": true
          },
          "supplierNumber": {
            "type": "integer",
            "description": "* Lieferanten-Nummer\r\n* Supplier number",
            "format": "int32",
            "nullable": true
          },
          "branch": {
            "type": "integer",
            "description": "* Filiale\r\n* Branch",
            "format": "int32",
            "nullable": true
          },
          "positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_DispatchAdvicePosition"
            },
            "description": "* Positionen\r\n* Positions",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_DispatchAdvicePosition": {
        "type": "object",
        "properties": {
          "ean": {
            "type": "number",
            "description": "* EAN\r\n* EAN",
            "format": "double",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "* Menge\r\n* Amount",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_ExternalCustomerReturnCustomerInformation_Create": {
        "type": "object",
        "properties": {
          "customerId": {
            "type": "string",
            "description": "* Eindeutige ID des Kunden\r\n* Unique identifier of the customer",
            "format": "uuid",
            "nullable": true
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "firstName": {
            "type": "string",
            "description": "* Vorname\r\n* First name",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "* Nachname\r\n* Last name",
            "nullable": true
          },
          "street": {
            "type": "string",
            "description": "* Straße\r\n* Street",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "* Postleitzahl\r\n* ZIP code",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "* Stadt\r\n* City",
            "nullable": true
          },
          "telephone": {
            "type": "string",
            "description": "* Telefon-Nummer\r\n* Telephone number",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "* E-Mail Adresse\r\n* E-Mail address",
            "nullable": true
          },
          "iban": {
            "type": "string",
            "description": "* IBAN\r\n* IBAN",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_ExternalCustomerReturnPosition_Create": {
        "type": "object",
        "properties": {
          "receiptPosition": {
            "type": "integer",
            "description": "* Positionsnummer auf dem Bon\r\n* Position number on the receipt",
            "format": "int32",
            "nullable": true
          },
          "ean": {
            "type": "number",
            "description": "* EAN\r\n* EAN",
            "format": "double"
          },
          "textId": {
            "type": "string",
            "description": "* Text-Id für z.B. Retourengrund\r\n* Text id for e.g. return reason",
            "format": "uuid",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "* Beschreibung vom Kunden\r\n* Description from customer",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_ExternalCustomerReturn_Create": {
        "type": "object",
        "properties": {
          "receiptNumber": {
            "type": "string",
            "description": "* Bon-Nummer oder Onlinebestellung-Nummer\r\n* Receipt number or online order number",
            "nullable": true
          },
          "receiptDate": {
            "type": "string",
            "description": "* Bon-Datum\r\n* Receipt date",
            "format": "date-time",
            "nullable": true
          },
          "isWebshopOrder": {
            "type": "boolean",
            "description": "* Gibt an ob es sich um eine Onlinebestellung gehandelt hat\r\n* Flags as online order"
          },
          "allowRecall": {
            "type": "boolean",
            "description": "* Rückruf Erlaubnis\r\n* Recall allowance"
          },
          "description": {
            "type": "string",
            "description": "* Beschreibung vom Kunden\r\n* Description from customer",
            "nullable": true
          },
          "trackingNumber": {
            "type": "string",
            "description": "* Tracking Nummer des Versanddienstleisters\r\n* Tracking number of the shipping service provider",
            "nullable": true
          },
          "shippingDistance": {
            "type": "number",
            "description": "* Entfernung vom Versandort zum Kunden\r\n* Distance between the place of dispatch and the customer",
            "format": "double"
          },
          "textId": {
            "type": "string",
            "description": "* Text-ID von z.B. \"Wie sind Sie auf diesen Service Aufmerksam geworden?\"\r\n* Text id for eg \"How did you find out about this service?\"",
            "format": "uuid",
            "nullable": true
          },
          "customerInformation": {
            "$ref": "#/components/schemas/DTO_ExternalCustomerReturnCustomerInformation_Create"
          },
          "positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_ExternalCustomerReturnPosition_Create"
            },
            "description": "* Liste von Positionen\r\n* List of positions",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Anmeldung einer Kundenretoure\r\n* Registration of a customer return"
      },
      "DTO_ExternalInventoryDiscrepancyArticle_Create": {
        "type": "object",
        "properties": {
          "articleSizeId": {
            "type": "string",
            "description": "* Eindeutige ID des Artikels\r\n* Unique identifier of the product",
            "format": "uuid",
            "nullable": true
          },
          "articleVariantId": {
            "type": "string",
            "description": "* Alternative eindeutige ID des Artikels\r\n* Alternate unique identifier of the product",
            "format": "uuid",
            "nullable": true
          },
          "ean": {
            "type": "integer",
            "description": "* EAN des Artikels\r\n* EAN of the product",
            "format": "int64",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "* Anzahl\r\n* Quantity",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DTO_ExternalInventoryDiscrepancy_Create": {
        "type": "object",
        "properties": {
          "branchNumber": {
            "type": "integer",
            "description": "* Filiale-Nummer\r\n* Branch number",
            "format": "int32"
          },
          "articles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_ExternalInventoryDiscrepancyArticle_Create"
            },
            "description": "* Liste von Artikeln\r\n* List of articles",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Anmeldung einer Inventurdifferenz\r\n* Registration of an inventory discrepancy"
      },
      "DTO_ExternalOrderArticleSize_Create": {
        "type": "object",
        "properties": {
          "ean": {
            "type": "number",
            "description": "* EAN\r\n* EAN",
            "format": "double",
            "nullable": true
          },
          "size": {
            "type": "string",
            "description": "* Groesse\r\n* Size",
            "nullable": true
          },
          "size_y": {
            "type": "string",
            "description": "* Länge der Größe\r\n* Length of the size",
            "nullable": true
          },
          "sizeGroupNumber": {
            "type": "integer",
            "description": "* Groessengruppen Nummer\r\n* Size group number",
            "format": "int32"
          },
          "purchasePrice": {
            "type": "number",
            "description": "* Einkaufspreis\r\n* Purchase price",
            "format": "double"
          },
          "salePrice": {
            "type": "number",
            "description": "* Verkaufspreis\r\n* Price the size sales for",
            "format": "double"
          },
          "discountedSalePrice": {
            "type": "number",
            "description": "* Reduzierter Verkaufspreis\r\n* Discounted sale price",
            "format": "double",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "* Menge\r\n* Amount",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "DTO_ExternalOrderArticle_Create": {
        "type": "object",
        "properties": {
          "seasonNumber": {
            "type": "integer",
            "description": "* Saison-Nummer\r\n* Season number",
            "format": "int32",
            "nullable": true
          },
          "colorNumber": {
            "type": "integer",
            "description": "* Farbe-Nummer\r\n* Color number",
            "format": "int32",
            "nullable": true
          },
          "categoryNumber": {
            "type": "integer",
            "description": "* Warengruppe-Nummer\r\n* Category number",
            "format": "int32"
          },
          "shopNumber": {
            "type": "integer",
            "description": "* Shop-Nummer\r\n* Shop number",
            "format": "int32",
            "nullable": true
          },
          "materialNumber": {
            "type": "integer",
            "description": "* Material-Nummer\r\n* Material number",
            "format": "int32",
            "nullable": true
          },
          "targetGroupNumber": {
            "type": "integer",
            "description": "* Zielgruppe-Nummer\r\n* Target group number",
            "format": "int32",
            "nullable": true
          },
          "shapeNumber": {
            "type": "integer",
            "description": "* Form-Nummer\r\n* Shape number",
            "format": "int32",
            "nullable": true
          },
          "patternNumber": {
            "type": "integer",
            "description": "* Dessin-Nummer\r\n* Pattern number",
            "format": "int32",
            "nullable": true
          },
          "functionNumber": {
            "type": "integer",
            "description": "* Funktion-Nummer\r\n* Function number",
            "format": "int32",
            "nullable": true
          },
          "labelTypeNumber": {
            "type": "integer",
            "description": "* Etikettentyp-Nummer\r\n* Label type number",
            "format": "int32",
            "nullable": true
          },
          "supplierArticleNumber": {
            "type": "string",
            "description": "* Artikelnummer laut Lieferant\r\n* Atticlenumber given by the supplier",
            "nullable": true
          },
          "supplierColor": {
            "type": "string",
            "description": "* Farbbezeichnung laut Lieferant\r\n* Colorname given by the supplier",
            "nullable": true
          },
          "individualArticleNumber": {
            "type": "string",
            "description": "* Eigene Artikelnummer des Händlers\r\n* Individually given articlenumber by the retailer",
            "nullable": true
          },
          "expectedArrivalFrom": {
            "type": "string",
            "description": "* Frühstes Datum an dem die Order erwartet wird\r\n* Minimal expected arrival date",
            "format": "date-time",
            "nullable": true
          },
          "expectedArrivalUntil": {
            "type": "string",
            "description": "* Spähtestes Datum an dem die Order erwartet wird\r\n* Maximal expected arrival date",
            "format": "date-time",
            "nullable": true
          },
          "description1": {
            "type": "string",
            "description": "* Beschreibung 1\r\n* Description 1",
            "nullable": true
          },
          "description2": {
            "type": "string",
            "description": "* Beschreibung 2\r\n* Description",
            "nullable": true
          },
          "purchasePrice": {
            "type": "number",
            "description": "* Einkaufspreis\r\n* Purchase price",
            "format": "double"
          },
          "salePrice": {
            "type": "number",
            "description": "* Verkaufspreis\r\n* Price the size sales for",
            "format": "double"
          },
          "discountedSalePrice": {
            "type": "number",
            "description": "* Reduzierter Verkaufspreis\r\n* Discounted sale price",
            "format": "double",
            "nullable": true
          },
          "sizeType": {
            "type": "string",
            "description": "* Typ der Größen (z.B.: EU, US oder UK)\r\n* Typ for sizes (e.g.: EU, US or UK)",
            "nullable": true
          },
          "createProduct": {
            "type": "boolean",
            "description": "* Webshopaktikel kreieren\r\n* Create webshop article",
            "nullable": true
          },
          "isNOS": {
            "type": "boolean",
            "description": "* NOS\r\n* NOS",
            "nullable": true
          },
          "imageURL": {
            "type": "string",
            "description": "* Bildname für den Artikel\r\n* Imagename of the article",
            "nullable": true
          },
          "purchasingSection": {
            "type": "integer",
            "description": "* Einkaufsabschnitt\r\n* Purchasing section",
            "format": "int32",
            "nullable": true
          },
          "labelNumber": {
            "type": "integer",
            "description": "* Label Nummer\r\n* Label number",
            "format": "int32",
            "nullable": true
          },
          "catmanDate": {
            "type": "string",
            "description": "* Catman Datum\r\n* Catman date",
            "format": "date-time",
            "nullable": true
          },
          "brochureFlag": {
            "type": "string",
            "description": "* Prospekt Kennzeichen\r\n* Brochure flag",
            "nullable": true
          },
          "articleSizes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_ExternalOrderArticleSize_Create"
            },
            "description": "* Liste von Größen\r\n* List of sizes",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_ExternalOrder_Create": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "* Order-Number\r\n* order number",
            "nullable": true
          },
          "branchNumber": {
            "type": "integer",
            "description": "* Filiale-Nummer\r\n* Branch number",
            "format": "int32"
          },
          "supplierNumber": {
            "type": "integer",
            "description": "* Lieferant-Nummer\r\n* Supplier number",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "description": "* Beschreibung\r\n* Description",
            "nullable": true
          },
          "isEDI": {
            "type": "boolean",
            "description": "* Markiert die Order als EDI\r\n* Marks the order as EDI"
          },
          "articles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_ExternalOrderArticle_Create"
            },
            "description": "* Liste von Artikeln\r\n* List of articles",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Anmeldung einer Order\r\n* Registration of an order"
      },
      "DTO_ExternalPaymentAddress": {
        "type": "object",
        "properties": {
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "fullName": {
            "type": "string",
            "description": "* Name des Kunden\r\n* Name of the Customer",
            "nullable": true
          },
          "businessName": {
            "type": "string",
            "description": "* Firmenname\r\n* Buisness name",
            "nullable": true
          },
          "street": {
            "type": "string",
            "description": "* Straße\r\n* Street",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "* Stadt\r\n* City",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "* Postleitzahl\r\n* ZIP code",
            "nullable": true
          },
          "countryCode": {
            "type": "string",
            "description": "* ISO aplha-2 des Landes\r\n* ISO alpha-2 of the country",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Auftrags Adresse\r\n* Order address"
      },
      "DTO_ExternalPaymentPosition_Create": {
        "type": "object",
        "properties": {
          "articleSizeNumber": {
            "type": "integer",
            "description": "* Eindeutige Nummer des Artikels\r\n* Unique number of the product",
            "format": "int64",
            "nullable": true
          },
          "articleSizeId": {
            "type": "string",
            "description": "* Eindeutige ID des Artikels\r\n* Unique identifier of the product",
            "format": "uuid",
            "nullable": true
          },
          "articleVariantId": {
            "type": "string",
            "description": "* Alternative eindeutige ID des Artikels\r\n* Alternate unique identifier of the product",
            "format": "uuid",
            "nullable": true
          },
          "ean": {
            "type": "integer",
            "description": "* EAN des Artikels\r\n* EAN of the product",
            "format": "int64",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "* Verkaufspreis\r\n* Sale price",
            "format": "double"
          },
          "discount": {
            "type": "number",
            "description": "* Rabatt auf die Position\r\n* Discount on the Position",
            "format": "double"
          },
          "comment": {
            "type": "string",
            "description": "* Kommentar\r\n* Comment",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "* Menge\r\n* Amount",
            "format": "double"
          },
          "paymentOptionNumber": {
            "type": "integer",
            "description": "* Zahlungsbedingungs-Nummer\r\n* Payment option number",
            "format": "int32"
          },
          "stockBranchNumber": {
            "type": "integer",
            "description": "* Filial-Nummer in der der Artikel Bestand hat (Wenn gesetzt wird ein Transfer in die Buchungsfiliale gemacht)\r\n* Branch number where the article has stock (If set it triggers a transfer into the webshop branch)",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Anlage einer Position\r\n* Create of position"
      },
      "DTO_ExternalPaymentReturnPosition_Create": {
        "type": "object",
        "properties": {
          "articleSizeNumber": {
            "type": "integer",
            "description": "* Eindeutige Nummer des Artikels\r\n* Unique number of the product",
            "format": "int64",
            "nullable": true
          },
          "articleSizeId": {
            "type": "string",
            "description": "* Eindeutige ID des Artikels\r\n* Unique identifier of the product",
            "format": "uuid",
            "nullable": true
          },
          "articleVariantId": {
            "type": "string",
            "description": "* Alternative eindeutige ID des Artikels\r\n* Alternate unique identifier of the product",
            "format": "uuid",
            "nullable": true
          },
          "ean": {
            "type": "integer",
            "description": "* EAN des Artikels\r\n* EAN of the product",
            "format": "int64",
            "nullable": true
          },
          "price": {
            "type": "number",
            "description": "* Verkaufspreis\r\n* Sale price",
            "format": "double"
          },
          "discount": {
            "type": "number",
            "description": "* Rabatt auf die Position\r\n* Discount on the Position",
            "format": "double"
          },
          "comment": {
            "type": "string",
            "description": "* Kommentar\r\n* Comment",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "* Menge\r\n* Amount",
            "format": "double"
          },
          "paymentOptionNumber": {
            "type": "integer",
            "description": "* Zahlungsbedingungs-Nummer\r\n* Payment option number",
            "format": "int32"
          },
          "originalStockBranchNumber": {
            "type": "integer",
            "description": "* Filial-Nummer aus der der Artikel ursprünglich bezogen wurde (Wenn gesetzt wird ein Transfer in diese Filiale gemacht)\r\n* Branch number where the article was originally picked from (If set it triggers a transfer into that branch)",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Anlage einer Position\r\n* Create of position"
      },
      "DTO_ExternalPaymentReturn_Create": {
        "type": "object",
        "properties": {
          "orderNumber": {
            "type": "string",
            "description": "* Auftrag-Nummer\r\n* Order number",
            "nullable": true
          },
          "customerId": {
            "type": "string",
            "description": "* Eindeutige ID des Kunden\r\n* Unique identifier of the customer",
            "format": "uuid",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "* Vorname des Kunden (Füllen wenn CustomerId Feld null ist)\r\n* Firstname of the Customer (Fill if the CustomerId field is null)",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "* Nachname des Kunden (Füllen wenn CustomerId Feld null ist)\r\n* Lastname of the Customer (Fill if the CustomerId field is null)",
            "nullable": true
          },
          "customerAddress": {
            "$ref": "#/components/schemas/DTO_ExternalPaymentAddress"
          },
          "email": {
            "type": "string",
            "description": "* E-Mail Adresse\r\n* E-Mail address",
            "nullable": true
          },
          "telephone": {
            "type": "string",
            "description": "* Telefon-Nummer\r\n* Telephone number",
            "nullable": true
          },
          "discount": {
            "type": "number",
            "description": "* Rabatt auf den Kauf (Rabatt auf einzelne Position nicht mit angeben)\r\n* Discount on the whole purchase (Do not include discounts on single positions)",
            "format": "double"
          },
          "positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_ExternalPaymentReturnPosition_Create"
            },
            "description": "* Liste von Positionen\r\n* List of positions",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Anlage einer Gutschrift / Storno für Webshop Zahlung\r\n* Creation of webshop payment return or cancelation"
      },
      "DTO_ExternalPaymentVoucherRecharge_Create": {
        "type": "object",
        "properties": {
          "voucherId": {
            "type": "string",
            "description": "* Eindeutige ID des Gutscheins\r\n* Unique identifier of the voucher",
            "format": "uuid",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "* Wert der Aufladung\r\n* Value of the recharge",
            "format": "double"
          },
          "paymentOptionNumber": {
            "type": "integer",
            "description": "* Zahlungsbedingungs-Nummer\r\n* Payment option number",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "* Anlage einer Gutscheinaufladung\r\n* Create a voucher recharge"
      },
      "DTO_ExternalPaymentVoucherRedemption_Create": {
        "type": "object",
        "properties": {
          "voucherId": {
            "type": "string",
            "description": "* Eindeutige ID des Artikels\r\n* Unique identifier of the product",
            "format": "uuid",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "* Wert des Gutscheins\r\n* Value of the voucher",
            "format": "double"
          },
          "paymentOptionNumber": {
            "type": "integer",
            "description": "* Zahlungsbedingungs-Nummer\r\n* Payment option number",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "* Bezahlung mit Gutschein, der dem prohandel System bekannt ist\r\n* Payment with voucher that is known in prohandel"
      },
      "DTO_ExternalPayment_Create": {
        "type": "object",
        "properties": {
          "orderNumber": {
            "type": "string",
            "description": "* Auftrag-Nummer\r\n* Order number",
            "nullable": true
          },
          "customerId": {
            "type": "string",
            "description": "* Eindeutige ID des Kunden\r\n* Unique identifier of the customer",
            "format": "uuid",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "* Vorname des Kunden (Füllen wenn CustomerId Feld null ist)\r\n* Firstname of the Customer (Fill if the CustomerId field is null)",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "* Nachname des Kunden (Füllen wenn CustomerId Feld null ist)\r\n* Lastname of the Customer (Fill if the CustomerId field is null)",
            "nullable": true
          },
          "customerAddress": {
            "$ref": "#/components/schemas/DTO_ExternalPaymentAddress"
          },
          "email": {
            "type": "string",
            "description": "* E-Mail Adresse\r\n* E-Mail address",
            "nullable": true
          },
          "telephone": {
            "type": "string",
            "description": "* Telefon-Nummer\r\n* Telephone number",
            "nullable": true
          },
          "discount": {
            "type": "number",
            "description": "* Rabatt auf den Kauf (Rabatt auf einzelne Position nicht mit angeben)\r\n* Discount on the whole purchase (Do not include discounts on single positions)",
            "format": "double"
          },
          "positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_ExternalPaymentPosition_Create"
            },
            "description": "* Liste von Positionen\r\n* List of positions",
            "nullable": true
          },
          "voucherRecharges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_ExternalPaymentVoucherRecharge_Create"
            },
            "description": "* Liste von in prohandel bekannten Gutscheine, die eine Aufladung erhalten sollen\r\n* List of vouchers that are known in prohandel and should become a recharge",
            "nullable": true
          },
          "redeemedVouchers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_ExternalPaymentVoucherRedemption_Create"
            },
            "description": "* Liste von in prohandel bekannten Gutscheine, die für den Kauf benutzt wurden\r\n* List of vouchers that are known in prohandel and used for the purchase",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Anlage einer Webshop Zahlung\r\n* Creation of webshop payment"
      },
      "DTO_ExternalPriceReductionArticle_Create": {
        "type": "object",
        "properties": {
          "articleSizeNumber": {
            "type": "number",
            "description": "* ArticleSize-Nummer (EAN)\r\n* ArticleSize number (EAN)",
            "format": "double"
          },
          "branchNumber": {
            "type": "integer",
            "description": "* Filiale-Nummer\r\n* Branch number",
            "format": "int32"
          },
          "price": {
            "type": "number",
            "description": "* Neuer Preis\r\n* New price",
            "format": "double"
          },
          "validFrom": {
            "type": "string",
            "description": "* Gültig ab\r\n* Valid from",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_ExternalPriceReduction_Create": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "* Beschreibung\r\n* Description",
            "nullable": true
          },
          "articles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_ExternalPriceReductionArticle_Create"
            },
            "description": "* Liste von Artikeln\r\n* List of articles",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Anmeldung einer Preisänderung\r\n* Registration of a price reduction"
      },
      "DTO_ExternalStocktakingArticle_Create": {
        "type": "object",
        "properties": {
          "articleSizeId": {
            "type": "string",
            "description": "* Eindeutige ID des Artikels\r\n* Unique identifier of the product",
            "format": "uuid",
            "nullable": true
          },
          "barcode": {
            "type": "number",
            "description": "* Barcode des Artikels\r\n* Barcode of the article",
            "format": "double",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "* Anzahl\r\n* Quantity",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DTO_ExternalStocktaking_Create": {
        "type": "object",
        "properties": {
          "branchNumber": {
            "type": "integer",
            "description": "* Filiale-Nummer\r\n* Branch number",
            "format": "int32"
          },
          "compartmentNumber": {
            "type": "integer",
            "description": "* Fach-Nummer\r\n* compartment number",
            "format": "int32"
          },
          "articles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_ExternalStocktakingArticle_Create"
            },
            "description": "* Liste von Artikeln\r\n* List of articles",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Übergabe einer Aufnahmemenge für eine Inventur\r\n* Stocktaking for an active inventory"
      },
      "DTO_ExternalSupplierReturnPosition_Create": {
        "type": "object",
        "properties": {
          "articleSizeNumber": {
            "type": "number",
            "description": "* ArticleSize-Nummer (EAN)\r\n* ArticleSize number (EAN)",
            "format": "double"
          },
          "textId": {
            "type": "string",
            "description": "* Text-Id für z.B. Retourengrund\r\n* Text id for e.g. return reason",
            "format": "uuid",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "* Beschreibung\r\n* Description",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_ExternalSupplierReturn_Create": {
        "type": "object",
        "properties": {
          "supplierNumber": {
            "type": "integer",
            "description": "* Lieferanten-Nummer\r\n* Supplier number",
            "format": "int32"
          },
          "positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_ExternalSupplierReturnPosition_Create"
            },
            "description": "* Liste von Positionen\r\n* List of positions",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Anmeldung einer Lieferantenretoure\r\n* Registration of a supplier return"
      },
      "DTO_ExternalTransferArticle_Create": {
        "type": "object",
        "properties": {
          "articleSizeNumber": {
            "type": "integer",
            "description": "* Eindeutige Nummer des Artikels\r\n* Unique number of the product",
            "format": "int64",
            "nullable": true
          },
          "articleSizeId": {
            "type": "string",
            "description": "* Eindeutige ID des Artikels\r\n* Unique identifier of the product",
            "format": "uuid",
            "nullable": true
          },
          "articleVariantId": {
            "type": "string",
            "description": "* Alternative eindeutige ID des Artikels\r\n* Alternate unique identifier of the product",
            "format": "uuid",
            "nullable": true
          },
          "ean": {
            "type": "integer",
            "description": "* EAN des Artikels\r\n* EAN of the product",
            "format": "int64",
            "nullable": true
          },
          "originBranchNumber": {
            "type": "integer",
            "description": "* Quellfiliale-Nummer\r\n* Origin branch number",
            "format": "int32"
          },
          "quantity": {
            "type": "integer",
            "description": "* Anzahl\r\n* Quantity",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "DTO_ExternalTransfer_Create": {
        "type": "object",
        "properties": {
          "targetBranchNumber": {
            "type": "integer",
            "description": "* Zielfiliale-Nummer\r\n* Target branch number",
            "format": "int32"
          },
          "orderNumber": {
            "type": "string",
            "description": "* Auftrag-Nummer\r\n* Order number",
            "nullable": true
          },
          "articles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_ExternalTransferArticle_Create"
            },
            "description": "* Liste von Artikeln\r\n* List of articles",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Anmeldung eines Transfer\r\n* Registration of a transfer"
      },
      "DTO_Function": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "* Name der Funktion\r\n* Name of the function",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "searchTerm": {
            "type": "string",
            "description": "* Suchwort für die Funktion\r\n* Searchterm for the function",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "* Funktion-Nummer\r\n* Function number",
            "format": "int32",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Funktion als gelöscht\r\n* Flags the function as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Funktion\r\n* Function"
      },
      "DTO_GeneralCategory": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "* Name der Oberwarengruppe\r\n* Name of the general category",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "searchTerm": {
            "type": "string",
            "description": "* Suchwort für die Oberwarengruppe\r\n* Searchterm for the general category",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "* Oberwarengruppe-Nummer\r\n* General category number",
            "format": "int32",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Oberwarengruppe als gelöscht\r\n* Flags the general category as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Oberwarengruppe\r\n* General category"
      },
      "DTO_Inventory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "branchNumber": {
            "type": "integer",
            "description": "* Filial-Nummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "supplierNumber": {
            "type": "integer",
            "description": "* Lieferant-Nummer\r\n* Supplier number",
            "format": "int32",
            "nullable": true
          },
          "shopNumber": {
            "type": "integer",
            "description": "* Shop-Nummer\r\n* Shop number",
            "format": "int32",
            "nullable": true
          },
          "categoryNumber": {
            "type": "integer",
            "description": "* Warengruppe-Nummer\r\n* Category number",
            "format": "int32",
            "nullable": true
          },
          "active": {
            "type": "boolean",
            "description": "* Aktiv\r\n* Active",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "* Datum\r\n* Date",
            "format": "date-time",
            "nullable": true
          },
          "stocktakingDate": {
            "type": "string",
            "description": "* Aufnahmedatum\r\n* Stocktaking date",
            "format": "date-time",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/InventoryType"
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet den Shop als gelöscht\r\n* Flags the shop as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Inventur\r\n* Inventory"
      },
      "DTO_Invoice": {
        "type": "object",
        "properties": {
          "branchNumber": {
            "type": "integer",
            "description": "* Filiale-Nummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "customerNumber": {
            "type": "integer",
            "description": "* Kunde-Nummer\r\n* Customer number",
            "format": "int32",
            "nullable": true
          },
          "currencyNumber": {
            "type": "string",
            "description": "* Währung-Nummer\r\n* Currency number",
            "nullable": true
          },
          "receiptNumber": {
            "type": "integer",
            "description": "* Bon-Nummer\r\n* Receipt number",
            "format": "int32",
            "nullable": true
          },
          "receiptPosition": {
            "type": "integer",
            "description": "* Position auf dem Bon\r\n* Position on the receipt",
            "format": "int32",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "* Datum\r\n* Date",
            "format": "date-time",
            "nullable": true
          },
          "paymentDueDate": {
            "type": "string",
            "description": "* Fälligkeitsdatum der Rechnung\r\n* Due date of the invoice",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "staffNumber": {
            "type": "integer",
            "description": "* Personal-Nummer\r\n* Staff number",
            "format": "int32",
            "nullable": true
          },
          "cashRegisterNumber": {
            "type": "integer",
            "description": "* Kasse-Nummer\r\n* Cash register number",
            "format": "int32",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "* Rechnung-Nummer\r\n* Invoice number",
            "format": "int32",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "description": "* Status (0 = offen, 1 = erledigt, 10+ = in Mahnung)\r\n* Status (0 = open, 1 = cleared, 10+ = in overdue)",
            "format": "int32",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "* Wert\r\n* Amount",
            "format": "double",
            "nullable": true
          },
          "amountCleared": {
            "type": "number",
            "description": "* Bezahlter wert\r\n* Cleared amount",
            "format": "double",
            "nullable": true
          },
          "paymentConditionNumber": {
            "type": "integer",
            "description": "* Zahlungsbedingung-Nummer\r\n* Payment condition number",
            "format": "int32",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Rechnung als gelöscht\r\n* Flags the invoice as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Rechnung\r\n* Invoice"
      },
      "DTO_Label": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "* Name des Labels\r\n* Name of the label",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "searchTerm": {
            "type": "string",
            "description": "* Suchwort für das Label\r\n* Searchterm for the label",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "* Label-Nummer\r\n* Label number",
            "format": "int32",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet das Label als gelöscht\r\n* Flags the label as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Etikettentyp\r\n* Label type"
      },
      "DTO_LabelType": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "* Name des Etikettentyps\r\n* Name of the label type",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "searchTerm": {
            "type": "string",
            "description": "* Suchwort für den Etikettentyp\r\n* Searchterm for the label type",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "* Etikettentyp-Nummer\r\n* Label type number",
            "format": "int32",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet den Etikettentyp als gelöscht\r\n* Flags the label type as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Etikettentyp\r\n* Label type"
      },
      "DTO_MainCategory": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "* Name der Hauptwarengruppe\r\n* Name of the main category",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "searchTerm": {
            "type": "string",
            "description": "* Suchwort der Hauptwarengruppe\r\n* Searchterm of the main category",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "* Hauptwarengruppe-Nummer\r\n* Main category number",
            "format": "int32",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Hauptwarengruppe als gelöscht\r\n* Flags the main category as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Hauptwarengruppe\r\n* Main category"
      },
      "DTO_MainDepartment": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "* Name der Hauptabtieilung\r\n* Name of the main department",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "searchTerm": {
            "type": "string",
            "description": "* Suchwort der Hauptabteilung\r\n* Searchterm of the main department",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "* Hauptabtielung-Nummer\r\n* Main department number",
            "format": "int32",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Hauptabteilung als gelöscht\r\n* Flags the main department as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Hauptabteilung\r\n* Main department"
      },
      "DTO_Material": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "* Name des Materials\r\n* Name of the material",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "searchTerm": {
            "type": "string",
            "description": "* Suchwort für die Farbe\r\n* Searchterm for the color",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "* Material-Nummer\r\n* Material number",
            "format": "int32",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet das Material als gelöscht\r\n* Flags the material as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Material\r\n* Material"
      },
      "DTO_MinimumInventory": {
        "type": "object",
        "properties": {
          "branchNumber": {
            "type": "integer",
            "description": "* Filiale-Nummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "sizeGroupNumber": {
            "type": "integer",
            "description": "* Größengruppennummer\r\n* Size group number",
            "format": "int32",
            "nullable": true
          },
          "sizeGroupPosition": {
            "type": "integer",
            "description": "* Laufende Nummer der Größe\r\n* Position in the size group",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "string",
            "description": "* Größe\r\n* Size",
            "nullable": true
          },
          "articleSizeNumber": {
            "type": "number",
            "description": "Nummer der Artikelgröße\r\nNumber of the article size",
            "format": "double",
            "nullable": true
          },
          "supplierNumber": {
            "type": "integer",
            "description": "Lieferant-Nummer\r\nSupplier number",
            "format": "int32",
            "nullable": true
          },
          "isAutomaticReorder": {
            "type": "boolean",
            "nullable": true
          },
          "minimumOrderAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "fromYear": {
            "type": "integer",
            "description": "* Aktiv von (Jahr)\r\n* Active from (year)",
            "format": "int32",
            "nullable": true
          },
          "untilYear": {
            "type": "integer",
            "description": "* Aktiv bis (Jahr)\r\n* Active until (year)",
            "format": "int32",
            "nullable": true
          },
          "supplierArticleNumber": {
            "type": "string",
            "description": "* Lieferanten-Artikelnummer\r\n* Supplier article number",
            "nullable": true
          },
          "supplierArticleColor": {
            "type": "string",
            "description": "* Lieferanten-Artikelfarbe\r\n* Supplier article color",
            "nullable": true
          },
          "fromMonth": {
            "type": "integer",
            "description": "* Aktiv von (Monat)\r\n* Active from (month)",
            "format": "int32",
            "nullable": true
          },
          "untilMonth": {
            "type": "integer",
            "description": "* Aktiv bis (Monat)\r\n* Active until (month)",
            "format": "int32",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitpunkt der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Artikel-Variante als gelöscht\r\n* Flags the article variant as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Mindestbestände\r\n* Minimal inventory"
      },
      "DTO_Order": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "description": "* Numerische Id der Order\r\n* Numeric id of the order",
            "format": "int32",
            "nullable": true
          },
          "source": {
            "$ref": "#/components/schemas/OrderSource"
          },
          "created": {
            "type": "string",
            "description": "* Erstellungsdatum\r\n* Creation date",
            "format": "date-time",
            "nullable": true
          },
          "supplierNumber": {
            "type": "integer",
            "description": "* Lieferantennummer\r\n* Supplier number",
            "format": "int32",
            "nullable": true
          },
          "supplierOrderId": {
            "type": "string",
            "description": "* Bestellnummer des Lieferanten\r\n* Order id of the supplier",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige Id\r\n* Unique identifier",
            "format": "uuid"
          },
          "merchantNumber": {
            "type": "integer",
            "description": "* Händlernummer\r\n* Merchant number",
            "format": "int32",
            "nullable": true
          },
          "info": {
            "type": "string",
            "description": "* Infotext\r\n* Info text",
            "nullable": true
          },
          "overallDiscount": {
            "type": "number",
            "description": "* Gesamtrabatt\r\n* Overall discount",
            "format": "double",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "type": {
            "$ref": "#/components/schemas/OrderType"
          },
          "positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_OrderPosition"
            },
            "description": "* Orderpositionen\r\n* Order positions",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Order\r\n* Order"
      },
      "DTO_OrderChanges": {
        "type": "object",
        "properties": {
          "changes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_Order"
            },
            "nullable": true
          },
          "deletedOrders": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "deletedOrderPositions": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "deletedOrderPositionSizes": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_OrderPosition": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "description": "* Numerische Positionsnummer\r\n* Numeric position number",
            "format": "int32",
            "nullable": true
          },
          "articleNumber": {
            "type": "number",
            "description": "* Artikelnummer\r\n* Article number",
            "format": "double",
            "nullable": true
          },
          "branchNumber": {
            "type": "integer",
            "description": "* Filialnummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "customerNumber": {
            "type": "integer",
            "description": "* Kundennummer\r\n* Customer number",
            "format": "int32",
            "nullable": true
          },
          "warningCount": {
            "type": "integer",
            "description": "* Anzahl Mahnungen\r\n* Number of warnings issued",
            "format": "int32",
            "nullable": true
          },
          "expectedArrivalFrom": {
            "type": "string",
            "description": "* Frühestes erwartetes Lieferdatum\r\n* Earliest expected date of arrival",
            "format": "date-time",
            "nullable": true
          },
          "expectedArrivalUntil": {
            "type": "string",
            "description": "* Spätestes erwartetes Lieferdatum\r\n* Latest expected date of arrival",
            "format": "date-time",
            "nullable": true
          },
          "purchasePrice": {
            "type": "number",
            "description": "* Einkauspreis\r\n* Purchase price",
            "format": "double",
            "nullable": true
          },
          "sectionNumber": {
            "type": "integer",
            "description": "* Abschnittsnummer\r\n* Section number",
            "format": "int32",
            "nullable": true
          },
          "netPurchasePrice": {
            "type": "number",
            "description": "* Einkaufspreis (netto)\r\n* Net purchase price",
            "format": "double",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige Id\r\n* Unique identifier",
            "format": "uuid"
          },
          "info": {
            "type": "string",
            "description": "* Infotext\r\n* Info text",
            "nullable": true
          },
          "isConsignment": {
            "type": "boolean",
            "description": "* Kennzeichen für Kommisionsware\r\n* Flag for consignment article",
            "nullable": true
          },
          "deliveredPurchaseValue": {
            "type": "number",
            "description": "* Einkaufswert der ausgelieferten Waren\r\n* Purchase value of delivered goods",
            "format": "double",
            "nullable": true
          },
          "deliveredAmount": {
            "type": "number",
            "description": "* Anzahl der ausgelieferten Waren\r\n* Amount of delivered goods",
            "format": "double",
            "nullable": true
          },
          "deliveredSaleValue": {
            "type": "number",
            "description": "* Verkaufswert der ausgelieferten Waren\r\n* Sale value of delivered goods",
            "format": "double",
            "nullable": true
          },
          "firstWarningDate": {
            "type": "string",
            "description": "* Erstes Mahndatum\r\n* First warning issue date",
            "format": "date-time",
            "nullable": true
          },
          "lastWarningDate": {
            "type": "string",
            "description": "* Letztes Mahndatum\r\n* Last warning issue date",
            "format": "date-time",
            "nullable": true
          },
          "isNOS": {
            "type": "boolean",
            "description": "* Kennzeichen für NOS-Artikel\r\n* Flag for never out of stock articles",
            "nullable": true
          },
          "orderPurchaseValue": {
            "type": "number",
            "description": "* Einkaufswert der bestellten Waren\r\n* Purchase value of ordered goods",
            "format": "double",
            "nullable": true
          },
          "orderAmount": {
            "type": "number",
            "description": "* Anzahl der bestellten Waren\r\n* Amount of ordered goods",
            "format": "double",
            "nullable": true
          },
          "orderSaleValue": {
            "type": "number",
            "description": "* Verkaufswert der bestellten Waren\r\n* Sale value of ordered goods",
            "format": "double",
            "nullable": true
          },
          "discountPercent": {
            "type": "number",
            "description": "* Rabatt in Prozent\r\n* Discount in percent",
            "format": "double",
            "nullable": true
          },
          "backlogPurchaseValue": {
            "type": "number",
            "description": "* Einkaufswert der Rückstandswaren\r\n* Purchase value of backlog goods",
            "format": "double",
            "nullable": true
          },
          "backlogAmount": {
            "type": "number",
            "description": "* Anzahl der Rückstandswaren\r\n* Amount of backlog goods",
            "format": "double",
            "nullable": true
          },
          "backlogSaleValue": {
            "type": "number",
            "description": "* Verkaufswert der Rückstandswaren\r\n* Sale value of backlog goods",
            "format": "double",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "type": {
            "$ref": "#/components/schemas/OrderPositionType"
          },
          "salePrice": {
            "type": "number",
            "description": "* Verkaufspreis\r\n* Sale price",
            "format": "double",
            "nullable": true
          },
          "labelPrice": {
            "type": "number",
            "description": "* Etikettenpreis\r\n* Label price",
            "format": "double",
            "nullable": true
          },
          "distributedPurchaseValue": {
            "type": "number",
            "description": "* Einkaufswert der verteilten Waren\r\n* Purchase value of distributed goods",
            "format": "double",
            "nullable": true
          },
          "hasDistributor": {
            "type": "boolean",
            "description": "* Kennzeichen für Verteiler\r\n* Flag for distributor",
            "nullable": true
          },
          "distributionStatus": {
            "$ref": "#/components/schemas/OrderDistribution"
          },
          "distributedAmount": {
            "type": "number",
            "description": "* Anzahl der verteilten Waren\r\n* Amount of distributed goods",
            "format": "double",
            "nullable": true
          },
          "distributedSaleValue": {
            "type": "number",
            "description": "* Verkaufswert der verteilten Waren\r\n* Sale value of distributed goods",
            "format": "double",
            "nullable": true
          },
          "isWebshopProduct": {
            "type": "boolean",
            "description": "* Kennzeichen für Webshopartikel\r\n* Flag for webshop product",
            "nullable": true
          },
          "staffNumber": {
            "type": "integer",
            "description": "* Personalnummer\r\n* Staff number",
            "format": "int32",
            "nullable": true
          },
          "sizes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_OrderPositionSize"
            },
            "description": "* Größenliste\r\n* List of sizes",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Orderposition\r\n* Order position"
      },
      "DTO_OrderPositionSize": {
        "type": "object",
        "properties": {
          "articleNumber": {
            "type": "number",
            "description": "* Artikelnummer\r\n* Article number",
            "format": "double",
            "nullable": true
          },
          "branchNumber": {
            "type": "integer",
            "description": "* Filialnummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "sizeGroupNumber": {
            "type": "integer",
            "description": "* Größengruppennummer\r\n* Size group number",
            "format": "int32",
            "nullable": true
          },
          "sizeGroupPosition": {
            "type": "integer",
            "description": "* Laufende Nummer der Größe\r\n* Position in the size group",
            "format": "int32",
            "nullable": true
          },
          "size": {
            "type": "string",
            "description": "* Größe\r\n* Size",
            "nullable": true
          },
          "originalEAN": {
            "type": "number",
            "description": "* Original-EAN\r\n* Original EAN",
            "format": "double",
            "nullable": true
          },
          "purchasePrice": {
            "type": "number",
            "description": "* Einkaufspreis\r\n* Purchase price",
            "format": "double",
            "nullable": true
          },
          "netPurchasePrice": {
            "type": "number",
            "description": "* Netto Einkaufspreis\r\n* Net purchase price",
            "format": "double",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige Id\r\n* Unique identifier",
            "format": "uuid"
          },
          "ean": {
            "type": "number",
            "description": "* EAN\r\n* EAN",
            "format": "double",
            "nullable": true
          },
          "isConsignment": {
            "type": "boolean",
            "description": "* Kennzeichen für Kommisionsware\r\n* Flag for consignment article",
            "nullable": true
          },
          "deliveredAmount": {
            "type": "number",
            "description": "* Anzahl der ausgelieferten Waren\r\n* Amount of delivered goods",
            "format": "double",
            "nullable": true
          },
          "orderAmount": {
            "type": "number",
            "description": "* Anzahl der bestellten Waren\r\n* Amount of ordered goods",
            "format": "double",
            "nullable": true
          },
          "backlogAmount": {
            "type": "number",
            "description": "* Anzahl der Rückstandswaren\r\n* Amount of backlog goods",
            "format": "double",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "salePrice": {
            "type": "number",
            "description": "* Verkaufspreis\r\n* Sale price",
            "format": "double",
            "nullable": true
          },
          "labelPrice": {
            "type": "number",
            "description": "* Etikettenpreis\r\n* Label price",
            "format": "double",
            "nullable": true
          },
          "distributionStatus": {
            "$ref": "#/components/schemas/OrderDistribution"
          },
          "distributedAmount": {
            "type": "number",
            "description": "* Anzahl der verteilten Waren\r\n* Amount of distributed goods",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Orderpositionsgröße\r\n* Order position size"
      },
      "DTO_OutboundInventoryDifference": {
        "type": "object",
        "properties": {
          "documentNumber": {
            "type": "integer",
            "description": "* Abgangs-Beleg-Nr.\r\n* Document number",
            "format": "int32",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "* Abgangsdatum\r\n* Date",
            "format": "date-time",
            "nullable": true
          },
          "purchasePrice": {
            "type": "number",
            "description": "* Einkaufspreis\r\n* Purchase price",
            "format": "double",
            "nullable": true
          },
          "supplierPurchasePrice": {
            "type": "number",
            "description": "* Lieferanteneinkaufspreis\r\n* Supplier purchase price",
            "format": "double",
            "nullable": true
          },
          "netPurchasePrice": {
            "type": "number",
            "description": "* Netto-Einkaufspreis\r\n* Net purchase price",
            "format": "double",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Undeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "info": {
            "type": "string",
            "description": "* Zusatzinformationen\r\n* Additional information",
            "nullable": true
          },
          "positionNumber": {
            "type": "integer",
            "description": "* Positionsnummer\r\n* Position number",
            "format": "int32",
            "nullable": true
          },
          "reportNumber": {
            "type": "integer",
            "description": "* Reportnummer\r\n* Report number",
            "format": "int32",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "* Menge\r\n* Amount",
            "format": "double",
            "nullable": true
          },
          "salePrice": {
            "type": "number",
            "description": "* Verkaufspreis\r\n* Sale price",
            "format": "double",
            "nullable": true
          },
          "articleNumber": {
            "type": "number",
            "description": "* Artikelnummer\r\n* Article number",
            "format": "double",
            "nullable": true
          },
          "branchNumber": {
            "type": "integer",
            "description": "* Filialnummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "articleSizeNumber": {
            "type": "number",
            "description": "* Artikel-Größe-Nummer\r\n* Article size number",
            "format": "double",
            "nullable": true
          },
          "staffNumber": {
            "type": "integer",
            "description": "* Personalnummer\r\n* Staff number",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_OutboundMisc": {
        "type": "object",
        "properties": {
          "documentNumber": {
            "type": "integer",
            "description": "* Abgangs-Beleg-Nr.\r\n* Document number",
            "format": "int32",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "* Abgangsdatum\r\n* Date",
            "format": "date-time",
            "nullable": true
          },
          "purchasePrice": {
            "type": "number",
            "description": "* Einkaufspreis\r\n* Purchase price",
            "format": "double",
            "nullable": true
          },
          "supplierPurchasePrice": {
            "type": "number",
            "description": "* Lieferanteneinkaufspreis\r\n* Supplier purchase price",
            "format": "double",
            "nullable": true
          },
          "netPurchasePrice": {
            "type": "number",
            "description": "* Netto-Einkaufspreis\r\n* Net purchase price",
            "format": "double",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Undeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "info": {
            "type": "string",
            "description": "* Zusatzinformationen\r\n* Additional information",
            "nullable": true
          },
          "positionNumber": {
            "type": "integer",
            "description": "* Positionsnummer\r\n* Position number",
            "format": "int32",
            "nullable": true
          },
          "reportNumber": {
            "type": "integer",
            "description": "* Reportnummer\r\n* Report number",
            "format": "int32",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "* Menge\r\n* Amount",
            "format": "double",
            "nullable": true
          },
          "salePrice": {
            "type": "number",
            "description": "* Verkaufspreis\r\n* Sale price",
            "format": "double",
            "nullable": true
          },
          "articleNumber": {
            "type": "number",
            "description": "* Artikelnummer\r\n* Article number",
            "format": "double",
            "nullable": true
          },
          "branchNumber": {
            "type": "integer",
            "description": "* Filialnummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "articleSizeNumber": {
            "type": "number",
            "description": "* Artikel-Größe-Nummer\r\n* Article size number",
            "format": "double",
            "nullable": true
          },
          "staffNumber": {
            "type": "integer",
            "description": "* Personalnummer\r\n* Staff number",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_OutboundSupplierReturn": {
        "type": "object",
        "properties": {
          "documentNumber": {
            "type": "integer",
            "description": "* Abgangs-Beleg-Nr.\r\n* Document number",
            "format": "int32",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "* Abgangsdatum\r\n* Date",
            "format": "date-time",
            "nullable": true
          },
          "purchasePrice": {
            "type": "number",
            "description": "* Einkaufspreis\r\n* Purchase price",
            "format": "double",
            "nullable": true
          },
          "supplierPurchasePrice": {
            "type": "number",
            "description": "* Lieferanteneinkaufspreis\r\n* Supplier purchase price",
            "format": "double",
            "nullable": true
          },
          "netPurchasePrice": {
            "type": "number",
            "description": "* Netto-Einkaufspreis\r\n* Net purchase price",
            "format": "double",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Undeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "info": {
            "type": "string",
            "description": "* Zusatzinformationen\r\n* Additional information",
            "nullable": true
          },
          "positionNumber": {
            "type": "integer",
            "description": "* Positionsnummer\r\n* Position number",
            "format": "int32",
            "nullable": true
          },
          "reportNumber": {
            "type": "integer",
            "description": "* Reportnummer\r\n* Report number",
            "format": "int32",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "* Menge\r\n* Amount",
            "format": "double",
            "nullable": true
          },
          "salePrice": {
            "type": "number",
            "description": "* Verkaufspreis\r\n* Sale price",
            "format": "double",
            "nullable": true
          },
          "articleNumber": {
            "type": "number",
            "description": "* Artikelnummer\r\n* Article number",
            "format": "double",
            "nullable": true
          },
          "branchNumber": {
            "type": "integer",
            "description": "* Filialnummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "articleSizeNumber": {
            "type": "number",
            "description": "* Artikel-Größe-Nummer\r\n* Article size number",
            "format": "double",
            "nullable": true
          },
          "staffNumber": {
            "type": "integer",
            "description": "* Personalnummer\r\n* Staff number",
            "format": "int32",
            "nullable": true
          },
          "textNumber": {
            "type": "integer",
            "description": "* Textnummer\r\n* Text number",
            "format": "int32",
            "nullable": true
          },
          "merchantNumber": {
            "type": "integer",
            "description": "* Händler\r\n* Merchant number",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_OutboundTransfer": {
        "type": "object",
        "properties": {
          "documentNumber": {
            "type": "integer",
            "description": "* Abgangs-Beleg-Nr.\r\n* Document number",
            "format": "int32",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "* Abgangsdatum\r\n* Date",
            "format": "date-time",
            "nullable": true
          },
          "purchasePrice": {
            "type": "number",
            "description": "* Einkaufspreis\r\n* Purchase price",
            "format": "double",
            "nullable": true
          },
          "supplierPurchasePrice": {
            "type": "number",
            "description": "* Lieferanteneinkaufspreis\r\n* Supplier purchase price",
            "format": "double",
            "nullable": true
          },
          "netPurchasePrice": {
            "type": "number",
            "description": "* Netto-Einkaufspreis\r\n* Net purchase price",
            "format": "double",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Undeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "info": {
            "type": "string",
            "description": "* Zusatzinformationen\r\n* Additional information",
            "nullable": true
          },
          "positionNumber": {
            "type": "integer",
            "description": "* Positionsnummer\r\n* Position number",
            "format": "int32",
            "nullable": true
          },
          "reportNumber": {
            "type": "integer",
            "description": "* Reportnummer\r\n* Report number",
            "format": "int32",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "* Menge\r\n* Amount",
            "format": "double",
            "nullable": true
          },
          "salePrice": {
            "type": "number",
            "description": "* Verkaufspreis\r\n* Sale price",
            "format": "double",
            "nullable": true
          },
          "articleNumber": {
            "type": "number",
            "description": "* Artikelnummer\r\n* Article number",
            "format": "double",
            "nullable": true
          },
          "branchNumber": {
            "type": "integer",
            "description": "* Filialnummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "articleSizeNumber": {
            "type": "number",
            "description": "* Artikel-Größe-Nummer\r\n* Article size number",
            "format": "double",
            "nullable": true
          },
          "staffNumber": {
            "type": "integer",
            "description": "* Personalnummer\r\n* Staff number",
            "format": "int32",
            "nullable": true
          },
          "targetBranchNumber": {
            "type": "integer",
            "description": "* Zielfiliale\r\n* Target branch number",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_PackingList": {
        "type": "object",
        "properties": {
          "articleNumber": {
            "type": "number",
            "description": "Number of the article that arrived",
            "format": "double",
            "nullable": true
          },
          "branchNumber": {
            "type": "integer",
            "description": "Target branch number",
            "format": "int32",
            "nullable": true
          },
          "articleSizeNumber": {
            "type": "number",
            "description": "Number of the article size that arrived",
            "format": "double",
            "nullable": true
          },
          "currencyNumber": {
            "type": "string",
            "description": "Used currency",
            "nullable": true
          },
          "staffNumber": {
            "type": "integer",
            "description": "Staff number of the accepting staff member",
            "format": "int32",
            "nullable": true
          },
          "receiptNumber": {
            "type": "integer",
            "description": "Number of the receipt\r\nTo get a full packing list including all positions group results by receipt number",
            "format": "int32",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "Date component of the arrival date",
            "format": "date-time",
            "nullable": true
          },
          "purchasePrice": {
            "type": "number",
            "description": "Purchase price of the individual position",
            "format": "double",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "info": {
            "type": "string",
            "description": "Information",
            "nullable": true
          },
          "packingListNumber": {
            "type": "string",
            "description": "Number (can contain characters) of the packing list as named by the supplier",
            "nullable": true
          },
          "receiptPosition": {
            "type": "integer",
            "description": "Individual position on the receipt",
            "format": "int32",
            "nullable": true
          },
          "invoiceNumber": {
            "type": "string",
            "description": "Number of the invoice",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "description": "Quantity of articles delivered for this positions",
            "format": "double",
            "nullable": true
          },
          "time": {
            "type": "integer",
            "description": "Time component of the arrival date",
            "format": "int32",
            "nullable": true
          },
          "salePrice": {
            "type": "number",
            "description": "Sale price of the individual position",
            "format": "double",
            "nullable": true
          },
          "labelPrice": {
            "type": "number",
            "description": "Price of the current position as denoted on the label",
            "format": "double",
            "nullable": true
          },
          "fromBranchNumber": {
            "type": "integer",
            "description": "Source branch number",
            "format": "int32",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/PackingListType"
          },
          "merchantNumber": {
            "type": "integer",
            "description": "Merchant number (reference points to a record from the supplier endpoint)",
            "format": "int32",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet den Wareneingang als gelöscht\r\n* Flags the packing list as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Wareneingänge\r\n* Packing lists"
      },
      "DTO_Pattern": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "* Name des Dessin\r\n* Name of the pattern",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "searchTerm": {
            "type": "string",
            "description": "* Suchwort für das Dessin\r\n* Searchterm for the pattern",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "* Dessin-Nummer\r\n* Pattern number",
            "format": "int32",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet das Dessin als gelöscht\r\n* Flags the pattern as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Dessin\r\n* Pattern"
      },
      "DTO_Payment": {
        "type": "object",
        "properties": {
          "receiptNumber": {
            "type": "integer",
            "description": "* Bon-Nummer\r\n* Receipt number",
            "format": "int32",
            "nullable": true
          },
          "receiptPosition": {
            "type": "integer",
            "description": "* Position auf dem Bon\r\n* Position on the receipt",
            "format": "int32",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "* Date\r\n* Datum",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "cashRegisterNumber": {
            "type": "integer",
            "description": "* Kasse-Nummer\r\n* Cash register number",
            "format": "int32",
            "nullable": true
          },
          "staffNumber": {
            "type": "integer",
            "description": "* Personal-Nummer\r\n* Staff number",
            "format": "int32",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "description": "* Status (0 = offen, 1 = erledigt)\r\n* Status (0 = open, 1 = cleared)",
            "format": "int32",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "* Wert\r\n* Amount",
            "format": "double",
            "nullable": true
          },
          "branchNumber": {
            "type": "integer",
            "description": "* Filial-Nummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "customerNumber": {
            "type": "integer",
            "description": "* Kunde-Nummer\r\n* Customer number",
            "format": "int32",
            "nullable": true
          },
          "currencyNumber": {
            "type": "string",
            "description": "* Währung-Nummer\r\n* Currency number",
            "nullable": true
          },
          "invoiceDate": {
            "type": "string",
            "description": "* Datum der Rechnung\r\n* Date of the invoice",
            "format": "date-time",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "* Rechnung-Nummer\r\n* Invoice number",
            "format": "int32",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Zahlung als gelöscht\r\n* Flags the payment as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Zahlung für Rechnung\r\n* Payment for invoice"
      },
      "DTO_PaymentOption": {
        "type": "object",
        "properties": {
          "paymentOptionNumber": {
            "type": "integer",
            "description": "* Zahlungsbedingung-Nummer\r\n* Payment option number",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "* Name der Zahlungsbedingung\r\n* Name of the payment option",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "searchTerm": {
            "type": "string",
            "description": "* Suchwort der Zahlungsbedingung\r\n* Searchterm of the payment option",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Zahlunsbedingung als gelöscht\r\n* Flags the payment option as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Zahlungsbedingung\r\n* Payment option"
      },
      "DTO_Promotion": {
        "type": "object",
        "properties": {
          "promotionNumber": {
            "type": "integer",
            "description": "* Rabattaktion-Nummer\r\n* Promotion number",
            "format": "int32",
            "nullable": true
          },
          "sequentialPromotionNumber": {
            "type": "integer",
            "description": "* Laufende Nummer\r\n* Sequential number",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "* Name der Rabattaktion\r\n* Name of the Promotion",
            "nullable": true
          },
          "validFromDate": {
            "type": "string",
            "description": "* Gültig von Datum\r\n* Valid from date",
            "format": "date-time"
          },
          "validUntilDate": {
            "type": "string",
            "description": "* Gültig bis Datum\r\n* Valid until date",
            "format": "date-time"
          },
          "validFromTime": {
            "type": "integer",
            "description": "* Gültig von Zeit\r\n* Valid from time",
            "format": "int32",
            "nullable": true
          },
          "validUntilTime": {
            "type": "integer",
            "description": "* Gültig bis Zeit\r\n* Valid until time",
            "format": "int32",
            "nullable": true
          },
          "minValidCustomer": {
            "type": "integer",
            "description": "* Gültig von Kunde\r\n* Valid from customer",
            "format": "int32",
            "nullable": true
          },
          "maxValidCustomer": {
            "type": "integer",
            "description": "* Gültig bis Kunde\r\n* Valid up to customer",
            "format": "int32",
            "nullable": true
          },
          "minValidCategory": {
            "type": "integer",
            "description": "* Gültig von Warengruppe\r\n* Valid from category",
            "format": "int32",
            "nullable": true
          },
          "maxValidCategory": {
            "type": "integer",
            "description": "* Gültig bis Warengruppe\r\n* Valid up to category",
            "format": "int32",
            "nullable": true
          },
          "minValidSupplier": {
            "type": "integer",
            "description": "* Gültig von Lieferant\r\n* Valid from supplier",
            "format": "int32",
            "nullable": true
          },
          "maxValidSupplier": {
            "type": "integer",
            "description": "* Gültig bis Lieferant\r\n* Valid up to supplier",
            "format": "int32",
            "nullable": true
          },
          "minValidSeason": {
            "type": "integer",
            "description": "* Gültig von Saison\r\n* Valid from season",
            "format": "int32",
            "nullable": true
          },
          "maxValidSeason": {
            "type": "integer",
            "description": "* Gültig bis Saison\r\n* Valid up to season",
            "format": "int32",
            "nullable": true
          },
          "validForSupplierArticleNumber": {
            "type": "string",
            "description": "* Gültig für Lieferanten-Artikelnummer\r\n* Valid for supplier articlenumber",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/DiscountType"
          },
          "value1": {
            "type": "number",
            "description": "* Abhängig vom Typ enthält diese Feld folgende Werte: 0 = % Rabatt auf reguläre Ware, 1 = % auf reguläre Ware, 2 = Rabattwert auf reguläre Ware, 3 = Rabattwert auf ganze Ware \r\n* Depending on the type this fields contains following values:  0 = % discount on regular goods, 1 = % on regular goods, 2 = discount on regular goods, 3 = discount on all goods",
            "format": "double",
            "nullable": true
          },
          "value2": {
            "type": "number",
            "description": "* Abhängig vom Typ enthält diese Feld folgende Werte: 0 = % Rabatt auf reduzierte Ware, 1 = % auf reduzierte Ware, 2 = ab Bonsumme, 3 = ab Bonsumme \r\n* Depending on the type this fields contains following values:  0 = % discount on discounted goods, 1 = % on discounted goods, 2 = from receipt total, 3 = from receipt total",
            "format": "double",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Rabattaktion als gelöscht\r\n* Flags the promotion as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Rabattaktion\r\n* Promotion"
      },
      "DTO_PromotionRedemption": {
        "type": "object",
        "properties": {
          "receiptNumber": {
            "type": "integer",
            "description": "* Bonnummer\r\n* Receipt number",
            "format": "int32",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "* Datum\r\n* Date",
            "format": "date-time",
            "nullable": true
          },
          "cashierNumber": {
            "type": "integer",
            "description": "* Kassierer-Nummer (Personal Endpunkt)\r\n* Cashier number (Staff endpoint)",
            "format": "int32",
            "nullable": true
          },
          "receiptPosition": {
            "type": "integer",
            "description": "* Position auf dem Bon\r\n* Position on the receipt",
            "format": "int32",
            "nullable": true
          },
          "discountValue": {
            "type": "number",
            "description": "* Wert des Rabatts\r\n* Value of the discount",
            "format": "double",
            "nullable": true
          },
          "branchNumber": {
            "type": "integer",
            "description": "* Filiale-Nummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "promotionNumber": {
            "type": "integer",
            "description": "* Rabattaktion-Nummer\r\n* Promotion number",
            "format": "int32",
            "nullable": true
          },
          "sequentialPromotionNumber": {
            "type": "integer",
            "description": "* Laufende Nummer\r\n* Sequential number of the promotion",
            "format": "int32",
            "nullable": true
          },
          "cashRegisterNumber": {
            "type": "integer",
            "description": "* Kasse-Nummer\r\n* Cash register number",
            "format": "int32",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Rabattaktion Einlösung\r\n* Promotion redemption"
      },
      "DTO_PromotionSelection": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "description": "* Nummer\r\n* Number",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "* Name\r\n* Name",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "* Datum\r\n* Date",
            "format": "date-time",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "customers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_PromotionSelectionPosition"
            },
            "description": "* Selektierte Kunden\r\n* Selected customers",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Kundenaktion Selektion\r\n* Promotion selection"
      },
      "DTO_PromotionSelectionPosition": {
        "type": "object",
        "properties": {
          "customerNumber": {
            "type": "integer",
            "description": "* Nummer\r\n* Number",
            "format": "int32",
            "nullable": true
          },
          "customerId": {
            "type": "string",
            "description": "* Eindeutige Id\r\n* Unique identifier",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_Receipt": {
        "type": "object",
        "properties": {
          "branchNumber": {
            "type": "integer",
            "description": "* Filiale-Nummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "customerNumber": {
            "type": "integer",
            "description": "* Kunde-Nummer\r\n* Customer number",
            "format": "int32",
            "nullable": true
          },
          "customerSalutation": {
            "type": "string",
            "description": "* Kunde-Anrede\r\n* Customer salutation",
            "nullable": true
          },
          "customerCountry": {
            "type": "string",
            "description": "* Kunde-Land\r\n* Customer country",
            "nullable": true
          },
          "customerName1": {
            "type": "string",
            "description": "* Kunde-Name 1\r\n* Customer name 1",
            "nullable": true
          },
          "customerName2": {
            "type": "string",
            "description": "* Kunde-Name 2\r\n* Customer name 2",
            "nullable": true
          },
          "customerCity": {
            "type": "string",
            "description": "* Kunde-Ort\r\n* Customer city",
            "nullable": true
          },
          "customerZipCode": {
            "type": "string",
            "description": "* Kunde-PLZ\r\n* Customer ZIP code",
            "nullable": true
          },
          "customerStreet": {
            "type": "string",
            "description": "* Kunde-Strasse\r\n* Customer street",
            "nullable": true
          },
          "customerTitel": {
            "type": "string",
            "description": "* Kunde-Titel\r\n* Customer titel",
            "nullable": true
          },
          "receiptNumber": {
            "type": "integer",
            "description": "* Bon-Nummer\r\n* Receipt number",
            "format": "int32",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "* Datum\r\n* Date",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "cashierNumber": {
            "type": "integer",
            "description": "* Kassierer-Nummer (Personal Endpunkt)\r\n* Cashier number (Staff endpoint)",
            "format": "int32",
            "nullable": true
          },
          "cashRegisterNumber": {
            "type": "integer",
            "description": "* Kasse-Nummer\r\n* Cash register number",
            "format": "int32",
            "nullable": true
          },
          "time": {
            "type": "integer",
            "description": "* Zeit\r\n* Time",
            "format": "int32",
            "nullable": true
          },
          "taxPercentage1": {
            "type": "number",
            "description": "* Mehrwertsteuer Prozentsatz 1\r\n* Tax percentage 1",
            "format": "double",
            "nullable": true
          },
          "taxPercentage2": {
            "type": "number",
            "description": "* Mehrwertsteuer Prozentsatz 2\r\n* Tax percentage 2",
            "format": "double",
            "nullable": true
          },
          "taxPercentage3": {
            "type": "number",
            "description": "* Mehrwertsteuer Prozentsatz 3\r\n* Tax percentage 3",
            "format": "double",
            "nullable": true
          },
          "taxPercentage4": {
            "type": "number",
            "description": "* Mehrwertsteuer Prozentsatz 4\r\n* Tax percentage 4",
            "format": "double",
            "nullable": true
          },
          "taxPercentage5": {
            "type": "number",
            "description": "* Mehrwertsteuer Prozentsatz 5\r\n* Tax percentage 5",
            "format": "double",
            "nullable": true
          },
          "taxValue1": {
            "type": "number",
            "description": "* Mehrwertsteuer Wert 1\r\n* Tax value 1",
            "format": "double",
            "nullable": true
          },
          "taxValue2": {
            "type": "number",
            "description": "* Mehrwertsteuer Wert 2\r\n* Tax value 2",
            "format": "double",
            "nullable": true
          },
          "taxValue3": {
            "type": "number",
            "description": "* Mehrwertsteuer Wert 3\r\n* Tax value 3",
            "format": "double",
            "nullable": true
          },
          "taxValue4": {
            "type": "number",
            "description": "* Mehrwertsteuer Wert 4\r\n* Tax value 4",
            "format": "double",
            "nullable": true
          },
          "taxValue5": {
            "type": "number",
            "description": "* Mehrwertsteuer Wert 5\r\n* Tax value 5",
            "format": "double",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet den Verkauf als gelöscht\r\n* Flags the sale as deleted"
          },
          "information": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_ReceiptInformation"
            },
            "description": "* Zusätzliche Bon-Informationen\r\n* Additional receipt information",
            "nullable": true
          },
          "positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_ReceiptPosition"
            },
            "description": "* Bon-Positionen\r\n* Receipt positions",
            "nullable": true
          },
          "paymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_ReceiptPaymentMethods"
            },
            "description": "* Bon-Zahlungen\r\n* Receipt payments",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Bon\r\n* Receipt"
      },
      "DTO_ReceiptCreate": {
        "type": "object",
        "properties": {
          "branchNumber": {
            "type": "integer",
            "description": "* Filiale-Nummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "customerNumber": {
            "type": "integer",
            "description": "* Kunde-Nummer\r\n* Customer number",
            "format": "int32",
            "nullable": true
          },
          "customerSalutation": {
            "type": "string",
            "description": "* Kunde-Anrede\r\n* Customer salutation",
            "nullable": true
          },
          "customerCountry": {
            "type": "string",
            "description": "* Kunde-Land\r\n* Customer country",
            "nullable": true
          },
          "customerName1": {
            "type": "string",
            "description": "* Kunde-Name 1\r\n* Customer name 1",
            "nullable": true
          },
          "customerName2": {
            "type": "string",
            "description": "* Kunde-Name 2\r\n* Customer name 2",
            "nullable": true
          },
          "customerCity": {
            "type": "string",
            "description": "* Kunde-Ort\r\n* Customer city",
            "nullable": true
          },
          "customerZipCode": {
            "type": "string",
            "description": "* Kunde-PLZ\r\n* Customer ZIP code",
            "nullable": true
          },
          "customerStreet": {
            "type": "string",
            "description": "* Kunde-Strasse\r\n* Customer street",
            "nullable": true
          },
          "customerTitle": {
            "type": "string",
            "description": "* Kunde-Titel\r\n* Customer title",
            "nullable": true
          },
          "receiptNumber": {
            "type": "integer",
            "description": "* Bon-Nummer\r\n* Receipt number",
            "format": "int32",
            "nullable": true
          },
          "dateTime": {
            "type": "string",
            "description": "* Datum\r\n* Date",
            "format": "date-time",
            "nullable": true
          },
          "cashierNumber": {
            "type": "integer",
            "description": "* Kassierer-Nummer (Personal Endpunkt)\r\n* Cashier number (Staff endpoint)",
            "format": "int32",
            "nullable": true
          },
          "cashRegisterNumber": {
            "type": "integer",
            "description": "* Kasse-Nummer\r\n* Cash register number",
            "format": "int32",
            "nullable": true
          },
          "valueAtNormalVatRate": {
            "type": "number",
            "description": "* Mehrwertsteuer Wert 1\r\n* Tax value 1",
            "format": "double",
            "nullable": true
          },
          "valueAtReducedVatRate": {
            "type": "number",
            "description": "* Mehrwertsteuer Wert 2\r\n* Tax value 2",
            "format": "double",
            "nullable": true
          },
          "valueAtSpecialVatRate1": {
            "type": "number",
            "description": "* Mehrwertsteuer Wert 3\r\n* Tax value 3",
            "format": "double",
            "nullable": true
          },
          "valueAtSpecialVatRate2": {
            "type": "number",
            "description": "* Mehrwertsteuer Wert 4\r\n* Tax value 4",
            "format": "double",
            "nullable": true
          },
          "valueAtNoVatRate": {
            "type": "number",
            "description": "* Mehrwertsteuer Wert 5\r\n* Tax value 5",
            "format": "double",
            "nullable": true
          },
          "externalIdentifier": {
            "type": "string",
            "description": "* Bon-/Vorgangs-ID des erzeugenden Fremdsystems\r\n* Receipt-/process-id of the creating external system",
            "nullable": true
          },
          "positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_ReceiptPositionCreate"
            },
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "nullable": true
          },
          "paymentMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_ReceiptPaymentMethodsCreate"
            },
            "description": "* Bon-Zahlungen\r\n* Receipt payments",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_ReceiptInformation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "text": {
            "type": "string",
            "description": "* Text\r\n* Text",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_ReceiptPaymentMethods": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "description": "* Description\r\n* Description",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "* Wert\r\n* Amount",
            "format": "double",
            "nullable": true
          },
          "voucherNumber": {
            "type": "integer",
            "description": "* Gutschein-Nummer\r\n* Voucher number",
            "format": "int32",
            "nullable": true
          },
          "invoiceNumber": {
            "type": "integer",
            "description": "* Rechnung-Nummer\r\n* Invoice number",
            "format": "int32",
            "nullable": true
          },
          "couponCode": {
            "type": "string",
            "description": "* Coupon Code\r\n* Coupon code",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_ReceiptPaymentMethodsCreate": {
        "type": "object",
        "properties": {
          "cashRegisterPaymentOptionId": {
            "type": "string",
            "description": "* Eindeutige ID der Zahlungsbedingung\r\n* Unique identifier of PaymentOption",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "description": "* Beschreibung\r\n* Description",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "* Wert\r\n* Amount",
            "format": "double",
            "nullable": true
          },
          "voucherNumber": {
            "type": "integer",
            "description": "* Gutschein-Nummer\r\n* Voucher number",
            "format": "int32",
            "nullable": true
          },
          "invoiceNumber": {
            "type": "integer",
            "description": "* Rechnung-Nummer\r\n* Invoice number",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_ReceiptPosition": {
        "type": "object",
        "properties": {
          "articleSizeNumber": {
            "type": "number",
            "description": "* Artike-Größe-Nummer\r\n* Article size number",
            "format": "double",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "discount": {
            "type": "number",
            "description": "* Kunden-Rabatt\r\n* Customer discount",
            "format": "double",
            "nullable": true
          },
          "deduction": {
            "type": "number",
            "description": "* Nachlass\r\n* Deduction",
            "format": "double",
            "nullable": true
          },
          "staffDiscount": {
            "type": "number",
            "description": "* Personal-Rabatt\r\n* Staff discount",
            "format": "double",
            "nullable": true
          },
          "customerDiscount": {
            "type": "number",
            "description": "* Kunden-Rabatt\r\n* Customer discount",
            "format": "double",
            "nullable": true
          },
          "staffNumber": {
            "type": "integer",
            "description": "* Personal-Nummer\r\n* Staff number",
            "format": "int32",
            "nullable": true
          },
          "staffName": {
            "type": "string",
            "description": "* Personal-Name\r\n* Staff name",
            "nullable": true
          },
          "receiptPosition": {
            "type": "integer",
            "description": "* Position auf dem Bon\r\n* Position on the receipt",
            "format": "int32",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "description": "* Menge\r\n* Quantity",
            "format": "double",
            "nullable": true
          },
          "salePrice": {
            "type": "number",
            "description": "* Verkaufspreis\r\n* Sale price",
            "format": "double",
            "nullable": true
          },
          "labelPrice": {
            "type": "number",
            "description": "* Etikettenpreis\r\n* Price on the label",
            "format": "double",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "* Text\r\n* Text",
            "nullable": true
          },
          "currencyNumber": {
            "type": "string",
            "description": "* Währung-Nummer\r\n* Currency number",
            "nullable": true
          },
          "categoryNumber": {
            "type": "integer",
            "description": "* Warengruppe-Nummer\r\n* Category number",
            "format": "int32",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ReceiptType"
          },
          "voucherNumber": {
            "type": "integer",
            "description": "* Gutschein-Nummer\r\n* Voucher number",
            "format": "int32",
            "nullable": true
          },
          "invoiceNumber": {
            "type": "integer",
            "description": "* Rechnung-Nummer\r\n* Invoice number",
            "format": "int32",
            "nullable": true
          },
          "operatorNumber": {
            "type": "integer",
            "description": "* Bedienernummer\r\n* Operator number",
            "format": "int32",
            "nullable": true
          },
          "couponCode": {
            "type": "string",
            "description": "* Coupon Code\r\n* Coupon code",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_ReceiptPositionCreate": {
        "type": "object",
        "properties": {
          "articleSizeNumber": {
            "type": "number",
            "description": "* Artike-Größe-Nummer\r\n* Article size number",
            "format": "double",
            "nullable": true
          },
          "discount": {
            "type": "number",
            "description": "* Kunden-Rabatt\r\n* Customer discount",
            "format": "double",
            "nullable": true
          },
          "deduction": {
            "type": "number",
            "description": "* Nachlass\r\n* Deduction",
            "format": "double",
            "nullable": true
          },
          "staffDiscount": {
            "type": "number",
            "description": "* Personal-Rabatt\r\n* Staff discount",
            "format": "double",
            "nullable": true
          },
          "customerDiscount": {
            "type": "number",
            "description": "* Kunden-Rabatt\r\n* Customer discount",
            "format": "double",
            "nullable": true
          },
          "staffNumber": {
            "type": "integer",
            "description": "* Personal-Nummer\r\n* Staff number",
            "format": "int32",
            "nullable": true
          },
          "staffName": {
            "type": "string",
            "description": "* Personal-Name\r\n* Staff name",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "description": "* Menge\r\n* Quantity",
            "format": "double",
            "nullable": true
          },
          "salePrice": {
            "type": "number",
            "description": "* Verkaufspreis\r\n* Sale price",
            "format": "double",
            "nullable": true
          },
          "labelPrice": {
            "type": "number",
            "description": "* Etikettenpreis\r\n* Price on the label",
            "format": "double",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "* Text\r\n* Text",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "description": "* Währung\r\n* Currency",
            "nullable": true
          },
          "categoryNumber": {
            "type": "integer",
            "description": "* Warengruppe-Nummer\r\n* Category number",
            "format": "int32",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ReceiptType"
          },
          "voucherNumber": {
            "type": "integer",
            "description": "* Gutschein-Nummer\r\n* Voucher number",
            "format": "int32",
            "nullable": true
          },
          "invoiceNumber": {
            "type": "integer",
            "description": "* Rechnung-Nummer\r\n* Invoice number",
            "format": "int32",
            "nullable": true
          },
          "operatorNumber": {
            "type": "integer",
            "description": "* Bedienernummer\r\n* Operator number",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_Sale": {
        "type": "object",
        "properties": {
          "articleNumber": {
            "type": "number",
            "description": "* Artikel-Nummer\r\n* Article number",
            "format": "double",
            "nullable": true
          },
          "branchNumber": {
            "type": "integer",
            "description": "* Filiale-Nummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "articleSizeNumber": {
            "type": "number",
            "description": "* Artike-Größe-Nummer\r\n* Article size number",
            "format": "double",
            "nullable": true
          },
          "customerNumber": {
            "type": "integer",
            "description": "* Kunde-Nummer\r\n* Customer number",
            "format": "int32",
            "nullable": true
          },
          "currencyNumber": {
            "type": "string",
            "description": "* Währung-Nummer\r\n* Currency number",
            "nullable": true
          },
          "countryNumber": {
            "type": "string",
            "description": "* Land-Nummer\r\n* Country number",
            "nullable": true
          },
          "staffNumber": {
            "type": "integer",
            "description": "* Personal-Nummer\r\n* Staff number",
            "format": "int32",
            "nullable": true
          },
          "receiptNumber": {
            "type": "integer",
            "description": "* Bon-Nummer\r\n* Receipt number",
            "format": "int32",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "* Datum\r\n* Date",
            "format": "date-time",
            "nullable": true
          },
          "purchasePrice": {
            "type": "number",
            "description": "* Einkaufspreis\r\n* Purchase price",
            "format": "double",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "cashierNumber": {
            "type": "integer",
            "description": "* Kassierer-Nummer (Personal Endpunkt)\r\n* Cashier number (Staff endpoint)",
            "format": "int32",
            "nullable": true
          },
          "discount": {
            "type": "number",
            "description": "* Kunden-Rabatt\r\n* Customer discount",
            "format": "double",
            "nullable": true
          },
          "cashRegisterNumber": {
            "type": "integer",
            "description": "* Kasse-Nummer\r\n* Cash register number",
            "format": "int32",
            "nullable": true
          },
          "deduction": {
            "type": "number",
            "description": "* Nachlass\r\n* Deduction",
            "format": "double",
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "description": "* Kunden Postleitzahl\r\n* Customer ZIP code",
            "nullable": true
          },
          "staffDiscount": {
            "type": "number",
            "description": "* Personal-Rabatt\r\n* Staff discount",
            "format": "double",
            "nullable": true
          },
          "receiptPosition": {
            "type": "integer",
            "description": "* Position auf dem Bon\r\n* Position on the receipt",
            "format": "int32",
            "nullable": true
          },
          "priceChangeReasonNumber": {
            "type": "integer",
            "description": "* Grund für Preisänderung\r\n* Reason for price change",
            "format": "int32",
            "nullable": true
          },
          "returnReasonNumber": {
            "type": "integer",
            "description": "* Grund für Rückgabe\r\n* Reason for return",
            "format": "int32",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "description": "* Menge\r\n* Quantity",
            "format": "double",
            "nullable": true
          },
          "salePrice": {
            "type": "number",
            "description": "* Verkaufspreis\r\n* Sale price",
            "format": "double",
            "nullable": true
          },
          "labelPrice": {
            "type": "number",
            "description": "* Etikettenpreis\r\n* Price on the label",
            "format": "double",
            "nullable": true
          },
          "paymentOptionNumber": {
            "type": "integer",
            "description": "* Zahlungsart-Nummer\r\n* Payment option number",
            "format": "int32",
            "nullable": true
          },
          "time": {
            "type": "integer",
            "description": "* Zeit\r\n* Time",
            "format": "int32",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/SaleType"
          },
          "alternativeReceiptNumber": {
            "type": "string",
            "description": "* Alternative Bon-Nummer (z.b. Auftragsnummer aus Webshop Auftrag)\r\n* Alternateive receipt number (e.g. Order number from webshop order)",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet den Verkauf als gelöscht\r\n* Flags the sale as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Verkauf\r\n* Sale"
      },
      "DTO_Season": {
        "type": "object",
        "properties": {
          "seasonNumber": {
            "type": "integer",
            "description": "* Saison-Nummer\r\n* Season number",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "* Name der Saison\r\n* Name of the season",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "searchTerm": {
            "type": "string",
            "description": "* Suchwort der Saison\r\n* Searchterm of the season",
            "nullable": true
          },
          "validFrom": {
            "type": "string",
            "description": "* Gültig von\r\n* Valid from",
            "format": "date-time",
            "nullable": true
          },
          "validUntil": {
            "type": "string",
            "description": "* Gültig bis\r\n* Valid until",
            "format": "date-time",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Saison als gelöscht\r\n* Flags the season as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Saison\r\n* Season"
      },
      "DTO_Selection": {
        "type": "object",
        "properties": {
          "receiptNumber": {
            "type": "integer",
            "description": "* Bon-Nummer\r\n* Receipt number",
            "format": "int32",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "* Datum\r\n* Date",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "deduction": {
            "type": "number",
            "description": "* Nachlass\r\n* Deduction",
            "format": "double",
            "nullable": true
          },
          "receiptPosition": {
            "type": "integer",
            "description": "* Position auf dem Bon\r\n* Position on the receipt",
            "format": "int32",
            "nullable": true
          },
          "discount": {
            "type": "number",
            "description": "* Rabatt\r\n* Discount",
            "format": "double",
            "nullable": true
          },
          "quantity": {
            "type": "number",
            "description": "* Menge\r\n* Quantity",
            "format": "double",
            "nullable": true
          },
          "text": {
            "type": "string",
            "description": "* Artikeltext\r\n* Article text",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "description": "* Status (0 = offen, 1 = in Rückgabe, 2 = berechnet)\r\n* Status (0 = open, 1 = to be returned, 2 = charged)",
            "format": "int32",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "* Verkaufswert\r\n* Sale price",
            "format": "double",
            "nullable": true
          },
          "branchNumber": {
            "type": "integer",
            "description": "* Filiale-Nummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "articleSizeNumber": {
            "type": "number",
            "description": "* Artikel-Größe-Nummer\r\n* Article size number",
            "format": "double",
            "nullable": true
          },
          "customerNumber": {
            "type": "integer",
            "description": "* Kunde-Nummer\r\n* Customer number",
            "format": "int32",
            "nullable": true
          },
          "staffNumber": {
            "type": "integer",
            "description": "* Personal-Nummer\r\n* Staff number",
            "format": "int32",
            "nullable": true
          },
          "categoryNumber": {
            "type": "integer",
            "description": "* Warengruppe-Nummer\r\n* Category number",
            "format": "int32",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Auswahl als gelöscht\r\n* Flags the customer as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Auswahl\r\n* Selection"
      },
      "DTO_Shape": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "* Name der Form\r\n* Name of the shape",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "searchTerm": {
            "type": "string",
            "description": "* Suchwort für die Form\r\n* Searchterm for the shape",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "* Form-Nummer\r\n* Shape number",
            "format": "int32",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Form als gelöscht\r\n* Flags the shape as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Form\r\n* Shape"
      },
      "DTO_ShipmentOption": {
        "type": "object",
        "properties": {
          "shipmentOptionNumber": {
            "type": "integer",
            "description": "* Versandart-Nummer\r\n* Shipment option number",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "* Name der Versandart\r\n* Name of the shipemtn option",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "searchTerm": {
            "type": "string",
            "description": "* Suchwort der Versandart\r\n* Searchterm of the shipment option",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Versandart als gelöscht\r\n* Flags the shipment option as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Versandart\r\n* Shipment option"
      },
      "DTO_Shop": {
        "type": "object",
        "properties": {
          "shopAreaNumber": {
            "type": "integer",
            "description": "* Shopbereich-Nummer\r\n* Shop area nummer",
            "format": "int32",
            "nullable": true
          },
          "mainShopNumber": {
            "type": "integer",
            "description": "* Hauptshop-Nummer\r\n* Main shop number",
            "format": "int32",
            "nullable": true
          },
          "staffNumber": {
            "type": "integer",
            "description": "* Personal-Nummer\r\n* Staff number",
            "format": "int32",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "* Name des Shops\r\n* Name of the shop",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "searchTerm": {
            "type": "string",
            "description": "* Suchwort des Shops\r\n* Searchterm of the shop",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "* Shop-Nummer\r\n* Shop number",
            "format": "int32",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet den Shop als gelöscht\r\n* Flags the shop as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Shop\r\n* Shop"
      },
      "DTO_ShoppingCart": {
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "string",
            "description": "* Geräte ID\r\n* Device identifier",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "* Name\r\n* Name",
            "nullable": true
          },
          "staffNumber": {
            "type": "integer",
            "description": "* Personal-Nummer\r\n* Staff number",
            "format": "int32"
          },
          "customerNumber": {
            "type": "integer",
            "description": "* Kunde-Nummer\r\n* Customer number",
            "format": "int32",
            "nullable": true
          },
          "branchNumber": {
            "type": "integer",
            "description": "* Filial-Nummer\r\n* Branch number",
            "format": "int32"
          },
          "positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_ShoppingCartPosition"
            },
            "description": "* Warenkorb-Positionen\r\n* Shopping cart positions",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "created": {
            "type": "string",
            "description": "* Zeitpunkt der Erstellung\r\n* Timestamp of the creation",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "* Warenkorb\r\n* Shopping cart"
      },
      "DTO_ShoppingCartPosition": {
        "type": "object",
        "properties": {
          "articleSizeId": {
            "type": "string",
            "description": "* Artikel Größe ID\r\n* Artilce size identifier",
            "format": "uuid"
          },
          "amount": {
            "type": "number",
            "description": "* Anzahl\r\n* Amount",
            "format": "double"
          },
          "price": {
            "type": "number",
            "description": "* Preis\r\n* Price",
            "format": "double"
          },
          "info": {
            "type": "string",
            "description": "* Info\r\n* Info",
            "nullable": true
          },
          "customName": {
            "type": "string",
            "description": "* Eigener Positionsname\r\n* Custom position name",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "articleSizeNumber": {
            "type": "number",
            "description": "* Artikel-Größe-Nummer\r\n* Number of the article size",
            "format": "double"
          },
          "shoppingCartId": {
            "type": "string",
            "description": "* Warenkorb ID\r\n* Shopping cart identifier",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "DTO_ShoppingCartPosition_Create": {
        "type": "object",
        "properties": {
          "articleSizeId": {
            "type": "string",
            "description": "* Artikel Größe ID\r\n* Artilce size identifier",
            "format": "uuid"
          },
          "amount": {
            "type": "number",
            "description": "* Anzahl\r\n* Amount",
            "format": "double"
          },
          "price": {
            "type": "number",
            "description": "* Preis\r\n* Price",
            "format": "double"
          },
          "info": {
            "type": "string",
            "description": "* Info\r\n* Info",
            "nullable": true
          },
          "customName": {
            "type": "string",
            "description": "* Eigener Positionsname\r\n* Custom position name",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_ShoppingCart_Create": {
        "type": "object",
        "properties": {
          "deviceId": {
            "type": "string",
            "description": "* Geräte ID\r\n* Device identifier",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "* Name\r\n* Name",
            "nullable": true
          },
          "staffNumber": {
            "type": "integer",
            "description": "* Personal-Nummer\r\n* Staff number",
            "format": "int32"
          },
          "customerNumber": {
            "type": "integer",
            "description": "* Kunde-Nummer\r\n* Customer number",
            "format": "int32",
            "nullable": true
          },
          "branchNumber": {
            "type": "integer",
            "description": "* Filial-Nummer\r\n* Branch number",
            "format": "int32"
          },
          "positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DTO_ShoppingCartPosition_Create"
            },
            "description": "* Warenkorb-Positionen\r\n* Shopping cart positions",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Warenkorb\r\n* Shopping cart"
      },
      "DTO_Size": {
        "type": "object",
        "properties": {
          "sizeGroupNumber": {
            "type": "integer",
            "description": "* Größengruppe-Nummer\r\n* Size group number",
            "format": "int32",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "* Name der Größe\r\n* Name of the size",
            "nullable": true
          },
          "position": {
            "type": "integer",
            "description": "* Position der Größe\r\n* Position of the size",
            "format": "int32",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Größe als gelöscht\r\n* Flags the size as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Größe\r\n* Size"
      },
      "DTO_SizeClass": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "description": "* Größengruppe-Nummer\r\n* Size class number",
            "format": "int32",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "* Name der Größengruppe\r\n* Name of the size class",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Größengruppe als gelöscht\r\n* Flags the size class as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Größengruppe\r\n* Sizes class"
      },
      "DTO_SizeGroup": {
        "type": "object",
        "properties": {
          "sizeGroupNumber": {
            "type": "integer",
            "description": "* Größengang-Nummer\r\n* Size group number",
            "format": "int32",
            "nullable": true
          },
          "sizeClassNumber": {
            "type": "integer",
            "description": "* Größengruppen-Nummer\r\n* Size class number",
            "format": "int32",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "searchTerm": {
            "type": "string",
            "description": "* Suchwort des Größengangs\r\n* Searchterm of the size group",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "* Name des Größengangs\r\n* Name of the size group",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet den Größengang als gelöscht\r\n* Flags the size group as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Größengang\r\n* Sizes group"
      },
      "DTO_SpecialPrice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "type": {
            "type": "integer",
            "description": "* Sonderpreis Typ\r\n* Special price type",
            "format": "int32",
            "nullable": true
          },
          "branchNumber": {
            "type": "integer",
            "description": "* Filiale-Nummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "specialPrice": {
            "type": "number",
            "description": "* Sonderpreis Wert\r\n* Special price value",
            "format": "double",
            "nullable": true
          },
          "validFrom": {
            "type": "string",
            "description": "* Gültig von Datum\r\n* Valid from Date",
            "format": "date-time",
            "nullable": true
          },
          "validUntil": {
            "type": "string",
            "description": "* Gültig bis Datum\r\n* Valid until Date",
            "format": "date-time",
            "nullable": true
          },
          "productId": {
            "type": "string",
            "description": "* Eindeutige ID des Product\r\n* Unique id of the product",
            "format": "uuid",
            "nullable": true
          },
          "productVariantId": {
            "type": "string",
            "description": "* Eindeutige ID der ProductVariant\r\n* Unique id of the productVariant",
            "format": "uuid",
            "nullable": true
          },
          "articleSizeId": {
            "type": "string",
            "description": "* Eindeutige ID der ArticleSize\r\n* Unique id of the articleSize",
            "format": "uuid",
            "nullable": true
          },
          "articleSizeNumber": {
            "type": "number",
            "description": "* Nummer ArticleSize\r\n* Number of the articleSize",
            "format": "double",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet den Sonderpreis als gelöscht\r\n* Flags the special price as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Sonderpreise\r\n* Special prices"
      },
      "DTO_Staff": {
        "type": "object",
        "properties": {
          "branchNumber": {
            "type": "integer",
            "description": "* Filial-Nummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "countryNumber": {
            "type": "string",
            "description": "* Land-Nummer\r\n* Country number",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "description": "* Kennzeichnet das Personal als aktiv\r\n* Flags the staff as active",
            "nullable": true
          },
          "salutation": {
            "type": "string",
            "description": "* Persönliche Anrede\r\n* Personal salutation",
            "nullable": true
          },
          "gender": {
            "$ref": "#/components/schemas/Gender"
          },
          "jobTitle": {
            "type": "string",
            "description": "* Berufsbezeichnung\r\n* Job title",
            "nullable": true
          },
          "imageName": {
            "type": "string",
            "description": "* Bildname\r\n* Image name",
            "nullable": true
          },
          "bankNumber": {
            "type": "integer",
            "description": "* Bankleitzahl\r\n* Bank number",
            "format": "int32",
            "nullable": true
          },
          "personalEmail": {
            "type": "string",
            "description": "* Private E-Mail Adresse\r\n* Private E-Mail address",
            "nullable": true
          },
          "companyEmail": {
            "type": "string",
            "description": "* Geschäftliche E-Mail Adresse\r\n* Company E-Mail address",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "description": "* Fax-Nummer\r\n* Fax number",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "* Geburtsdatum\r\n* Date of birth",
            "format": "date-time",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "info": {
            "type": "string",
            "description": "* Informationen über den Mitarbeiter\r\n* Information about the employe",
            "nullable": true
          },
          "bankAccount": {
            "type": "string",
            "description": "* Kontonummer\r\n* Bank account number",
            "nullable": true
          },
          "searchTerm": {
            "type": "string",
            "description": "* Suchwort für den Mitarbeiter\r\n* Searchterm for the employe",
            "nullable": true
          },
          "mobilePhone": {
            "type": "string",
            "description": "* Handy-Nummer\r\n* Mobile phone number",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "description": "* Nachname\r\n* Last name",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "* Personal-Nummer\r\n* Staff number",
            "format": "int32",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "* Stadt\r\n* City",
            "nullable": true
          },
          "personalSalutation": {
            "type": "string",
            "description": "* Persönliche Anrede\r\n* Personal salutation",
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "description": "* Postleitzahl\r\n* ZIP code",
            "nullable": true
          },
          "street": {
            "type": "string",
            "description": "* Straße\r\n* Street",
            "nullable": true
          },
          "telephone": {
            "type": "string",
            "description": "* Telefon-Nummer\r\n* Telephone number",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "description": "* Vorname\r\n* First name",
            "nullable": true
          },
          "entryDate": {
            "type": "string",
            "description": "* Eintrittsdatum\r\n* Entry date",
            "format": "date-time",
            "nullable": true
          },
          "exitDate": {
            "type": "string",
            "description": "* Austrittsdatum\r\n* Exit date",
            "format": "date-time",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet das Personal als gelöscht\r\n* Flags the staff as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Personal\r\n* Staff"
      },
      "DTO_Status": {
        "type": "object",
        "properties": {
          "lastSuccessfulSynchronization": {
            "type": "string",
            "description": "* Datum der letzten erfolgreichen Synchronisation von Master zu Slave\r\n* Date and time of the last successful synchronization from master to slave",
            "format": "date-time",
            "nullable": true
          },
          "lastSuccessfulReverseSynchronization": {
            "type": "string",
            "description": "* Datum der letzten erfolgreichen Synchronisation von Slave zu Master\r\n* Date and time of the last successful synchronization from slave to master",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_Supplier": {
        "type": "object",
        "properties": {
          "currencyNumber": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "nullable": true
          },
          "countryNumber": {
            "type": "string",
            "description": "* Land-Nummer\r\n* Country number",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "description": "* Kennzeichent den Lieferanten als aktiv\r\n* Flags the supplier as active",
            "nullable": true
          },
          "isEDI": {
            "type": "boolean",
            "description": "* Kennzeichent den Lieferanten für EDI\r\n* Flags the supplier for EDI",
            "nullable": true
          },
          "bankCode": {
            "type": "integer",
            "description": "* Bankleitzahl\r\n* Bank code",
            "format": "int32",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "* E-Mail Adresse\r\n* E-Mail address",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "description": "* Fax-Nummer\r\n* Fax number",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "website": {
            "type": "string",
            "description": "* Webseite des Lieferanten\r\n* Website of the supplier",
            "nullable": true
          },
          "iban": {
            "type": "string",
            "description": "* IBAN\r\n* IBAN",
            "nullable": true
          },
          "info1": {
            "type": "string",
            "description": "* Informationen über den Lieferanten\r\n* Information about the supplier",
            "nullable": true
          },
          "info2": {
            "type": "string",
            "description": "* Mehr Informationen über den Lieferanten\r\n* More information about the supplier",
            "nullable": true
          },
          "bankAccount": {
            "type": "string",
            "description": "* Konto-Nummer\r\n* Bank account number",
            "nullable": true
          },
          "searchTerm": {
            "type": "string",
            "description": "* Suchwort für den Lieferanten\r\n* Searchterm for the supplier",
            "nullable": true
          },
          "mobilePhone": {
            "type": "string",
            "description": "* Handy-Nummer\r\n* Mobile phone number",
            "nullable": true
          },
          "name1": {
            "type": "string",
            "description": "* Name 1\r\n* Name 1",
            "nullable": true
          },
          "name2": {
            "type": "string",
            "description": "* Name 2\r\n* Name 2",
            "nullable": true
          },
          "name3": {
            "type": "string",
            "description": "* Name 3\r\n* Name 3",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "* Lieferant-Nummer\r\n* Supplier number",
            "format": "int32",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "* Stadt\r\n* City",
            "nullable": true
          },
          "zipCode": {
            "type": "string",
            "description": "* Postleitzahl\r\n* ZIP code",
            "nullable": true
          },
          "street": {
            "type": "string",
            "description": "* Straße\r\n* Street",
            "nullable": true
          },
          "bic": {
            "type": "string",
            "description": "* BIC\r\n* BIC",
            "nullable": true
          },
          "telephone": {
            "type": "string",
            "description": "* Telefon-Nummer\r\n* Telephone number",
            "nullable": true
          },
          "shipmentOptionNumber": {
            "type": "integer",
            "description": "* Versandart-Nummer\r\n* Shipment option number",
            "format": "int32",
            "nullable": true
          },
          "paymentOptionNumber": {
            "type": "integer",
            "description": "* Zahlungsbedingung-Nummer\r\n* Payment option number",
            "format": "int32",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet den Lieferanten als gelöscht\r\n* Flags the supplier as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Lieferant\r\n* Supplier"
      },
      "DTO_SupplierReturn": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "articleNumber": {
            "type": "integer",
            "description": "* Artikelnummer\r\n* Article number",
            "format": "int32",
            "nullable": true
          },
          "articleSizeNumber": {
            "type": "number",
            "description": "* Artikel-Größe-Nummer\r\n* Article size number",
            "format": "double",
            "nullable": true
          },
          "branchNumber": {
            "type": "integer",
            "description": "* Filialnummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "supplierNumber": {
            "type": "integer",
            "description": "* Liefereantennummer\r\n* Supplier number",
            "format": "int32",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "* Menge\r\n* Amount",
            "format": "double",
            "nullable": true
          },
          "created": {
            "type": "string",
            "description": "* Datum\r\n* Date",
            "format": "date-time",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Lieferantenretoure\r\n* Supplier return"
      },
      "DTO_TargetGroup": {
        "type": "object",
        "properties": {
          "number": {
            "type": "integer",
            "description": "* Zielgruppe-Nummer\r\n* Target group number",
            "format": "int32",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "searchTerm": {
            "type": "string",
            "description": "* Suchwort der Zielgruppe\r\n* Searchterm of the target group",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "* Name der Zielgruppe\r\n* Name of the target group",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet die Zielgruppe als gelöscht\r\n* Flags the target group as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Zielgruppe\r\n* Target group"
      },
      "DTO_Text": {
        "type": "object",
        "properties": {
          "textNumber": {
            "type": "integer",
            "description": "* Text-Nummer\r\n* Text number",
            "format": "int32",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "* Typ des Texts\r\n* Type of the text",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique identifier",
            "format": "uuid"
          },
          "searchTerm": {
            "type": "string",
            "description": "* Suchwort des Texts\r\n* Searchterm of the text",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "* Text\r\n* Text",
            "nullable": true
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet den Text als gelöscht\r\n* Flags the text as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Text\r\n* Text"
      },
      "DTO_Voucher": {
        "type": "object",
        "properties": {
          "branchNumber": {
            "type": "integer",
            "description": "* Filiale-Nummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "validUntil": {
            "type": "string",
            "description": "* Gültig bis Datum\r\n* Valid until date",
            "format": "date-time",
            "nullable": true
          },
          "validFrom": {
            "type": "string",
            "description": "* Gültig von Datum\r\n* Valid from Date",
            "format": "date-time",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "* Wert\r\n* Value",
            "format": "double",
            "nullable": true
          },
          "customerNumber": {
            "type": "integer",
            "description": "* Kunde-Nummer\r\n* Customer number",
            "format": "int32",
            "nullable": true
          },
          "currencyNumber": {
            "type": "string",
            "description": "* Währung-Nummer\r\n* Currency number",
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "* Gutscheinnotiz zur Information\r\n* Informational note",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique indentifier",
            "format": "uuid"
          },
          "internetCode": {
            "type": "string",
            "description": "* Code für Internet Einlösung\r\n* Code for internet redemption",
            "nullable": true
          },
          "receiptNumber": {
            "type": "integer",
            "description": "* Bon-Nummer\r\n* Receipt number",
            "format": "int32",
            "nullable": true
          },
          "receiptPosition": {
            "type": "integer",
            "description": "* Position auf dem Bon\r\n* Position on the receipt",
            "format": "int32",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "* Datum\r\n* Date",
            "format": "date-time",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "* Gutschein-Nummer\r\n* Voucher number",
            "format": "int32",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "description": "* Status, ob bereits der volle Betrag des Gutscheins eingelöst wurde (0 = offen, 1 = vollständig eingelöst)\r\n* Status whether the full amount of the voucher has been redeemed (0 = open, 1 = fully redeemed)",
            "format": "int32",
            "nullable": true
          },
          "voucherRedemptionDate": {
            "type": "string",
            "description": "* Datum der Einlösung\r\n* Date of the voucher redemption",
            "format": "date-time",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/VoucherType"
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet den Gutschein als gelöscht\r\n* Flags the voucher as deleted"
          },
          "amountRedeemed": {
            "type": "number",
            "description": "* Eingelöster Wert\r\n* Redeemed amount",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "* Gutschein\r\n* Voucher"
      },
      "DTO_VoucherRedemption": {
        "type": "object",
        "properties": {
          "branchNumber": {
            "type": "integer",
            "description": "* Filiale-Nummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "customerNumber": {
            "type": "integer",
            "description": "* Kunde-Nummer\r\n* Customer number",
            "format": "int32",
            "nullable": true
          },
          "cashRegisterNumber": {
            "type": "integer",
            "description": "* Kasse-Nummer\r\n* Cash register number",
            "format": "int32",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "* Wert\r\n* Amount",
            "format": "double"
          },
          "staffNumber": {
            "type": "integer",
            "description": "* Persoanl-Nummer\r\n* Staff number",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_VoucherReservation": {
        "type": "object",
        "properties": {
          "voucherId": {
            "type": "string",
            "description": "* Filiale-Nummer\r\n* Branch number",
            "format": "uuid"
          },
          "orderNumber": {
            "type": "string",
            "description": "* Auftrag-Nummer\r\n* Order number",
            "nullable": true
          },
          "receiptNumber": {
            "type": "integer",
            "description": "* Bon-Nummer\r\n* Receipt number",
            "format": "int32",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "* Wert\r\n* Amount",
            "format": "double"
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique indentifier",
            "format": "uuid"
          },
          "validUntil": {
            "type": "string",
            "description": "* Reservierung gültig bis\r\n* Reservation valid until",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "DTO_VoucherReservation_Create": {
        "type": "object",
        "properties": {
          "voucherId": {
            "type": "string",
            "description": "* Filiale-Nummer\r\n* Branch number",
            "format": "uuid"
          },
          "orderNumber": {
            "type": "string",
            "description": "* Auftrag-Nummer\r\n* Order number",
            "nullable": true
          },
          "receiptNumber": {
            "type": "integer",
            "description": "* Bon-Nummer\r\n* Receipt number",
            "format": "int32",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "description": "* Wert\r\n* Amount",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "DTO_Voucher_Create": {
        "type": "object",
        "properties": {
          "branchNumber": {
            "type": "integer",
            "description": "* Filiale-Nummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "validUntil": {
            "type": "string",
            "description": "* Gültig bis Datum\r\n* Valid until date",
            "format": "date-time",
            "nullable": true
          },
          "validFrom": {
            "type": "string",
            "description": "* Gültig von Datum\r\n* Valid from Date",
            "format": "date-time",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "* Wert\r\n* Value",
            "format": "double",
            "nullable": true
          },
          "customerNumber": {
            "type": "integer",
            "description": "* Kunde-Nummer\r\n* Customer number",
            "format": "int32",
            "nullable": true
          },
          "currencyNumber": {
            "type": "string",
            "description": "* Währung-Nummer\r\n* Currency number",
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "* Gutscheinnotiz zur Information\r\n* Informational note",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DTO_Voucher_Redeemed": {
        "type": "object",
        "properties": {
          "branchNumber": {
            "type": "integer",
            "description": "* Filiale-Nummer\r\n* Branch number",
            "format": "int32",
            "nullable": true
          },
          "validUntil": {
            "type": "string",
            "description": "* Gültig bis Datum\r\n* Valid until date",
            "format": "date-time",
            "nullable": true
          },
          "validFrom": {
            "type": "string",
            "description": "* Gültig von Datum\r\n* Valid from Date",
            "format": "date-time",
            "nullable": true
          },
          "value": {
            "type": "number",
            "description": "* Wert\r\n* Value",
            "format": "double",
            "nullable": true
          },
          "customerNumber": {
            "type": "integer",
            "description": "* Kunde-Nummer\r\n* Customer number",
            "format": "int32",
            "nullable": true
          },
          "currencyNumber": {
            "type": "string",
            "description": "* Währung-Nummer\r\n* Currency number",
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "* Gutscheinnotiz zur Information\r\n* Informational note",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "* Eindeutige ID\r\n* Unique indentifier",
            "format": "uuid"
          },
          "internetCode": {
            "type": "string",
            "description": "* Code für Internet Einlösung\r\n* Code for internet redemption",
            "nullable": true
          },
          "receiptNumber": {
            "type": "integer",
            "description": "* Bon-Nummer\r\n* Receipt number",
            "format": "int32",
            "nullable": true
          },
          "receiptPosition": {
            "type": "integer",
            "description": "* Position auf dem Bon\r\n* Position on the receipt",
            "format": "int32",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "* Datum\r\n* Date",
            "format": "date-time",
            "nullable": true
          },
          "number": {
            "type": "integer",
            "description": "* Gutschein-Nummer\r\n* Voucher number",
            "format": "int32",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "description": "* Status, ob bereits der volle Betrag des Gutscheins eingelöst wurde (0 = offen, 1 = vollständig eingelöst)\r\n* Status whether the full amount of the voucher has been redeemed (0 = open, 1 = fully redeemed)",
            "format": "int32",
            "nullable": true
          },
          "voucherRedemptionDate": {
            "type": "string",
            "description": "* Datum der Einlösung\r\n* Date of the voucher redemption",
            "format": "date-time",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/VoucherType"
          },
          "lastChange": {
            "type": "string",
            "description": "* Zeitstempel der letzten Änderung\r\n* Timestamp of the last change",
            "format": "date-time",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "* Kennzeichnet den Gutschein als gelöscht\r\n* Flags the voucher as deleted"
          }
        },
        "additionalProperties": false,
        "description": "* Einlösung eines Gutscheins\r\n* Redemption of a Voucher"
      },
      "DeclarationOfConsent": {
        "enum": [
          0,
          1,
          2,
          4,
          8
        ],
        "type": "integer",
        "format": "int32"
      },
      "DiscountType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "Gender": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "InventoryType": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "MaritalStatus": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "OrderDistribution": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "OrderPositionType": {
        "enum": [
          0
        ],
        "type": "integer",
        "format": "int32"
      },
      "OrderSource": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32"
      },
      "OrderStatus": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32"
      },
      "OrderType": {
        "enum": [
          0,
          8
        ],
        "type": "integer",
        "format": "int32"
      },
      "PackingListType": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "format": "int32"
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "ReceiptType": {
        "enum": [
          0,
          10,
          12,
          14,
          16,
          20,
          21,
          91,
          92,
          93
        ],
        "type": "integer",
        "format": "int32"
      },
      "SaleType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "VoucherType": {
        "enum": [
          0,
          1,
          4,
          5
        ],
        "type": "integer",
        "format": "int32"
      }
    }
  }
}